"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultiBackendImpl = void 0;

var _PreviewListImpl = require("./PreviewListImpl");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

var _current = new WeakMap();

var _previews = new WeakMap();

var _backends = new WeakMap();

var _backendsList = new WeakMap();

var _nodes = new WeakMap();

var _createBackend = new WeakMap();

var _addEventListeners = new WeakMap();

var _removeEventListeners = new WeakMap();

var _backendSwitcher = new WeakMap();

var _callBackend = new WeakMap();

var _connectBackend = new WeakMap();

var MultiBackendImpl =
/*private*/

/*private*/

/*private*/

/*private*/

/*private*/
function MultiBackendImpl(_manager, _context, _options) {
  var _this = this;

  _classCallCheck(this, MultiBackendImpl);

  _current.set(this, {
    writable: true,
    value: void 0
  });

  _previews.set(this, {
    writable: true,
    value: void 0
  });

  _backends.set(this, {
    writable: true,
    value: void 0
  });

  _backendsList.set(this, {
    writable: true,
    value: void 0
  });

  _nodes.set(this, {
    writable: true,
    value: void 0
  });

  _createBackend.set(this, {
    writable: true,
    value: function value(manager, context, backend) {
      var _backend$preview, _backend$skipDispatch;

      if (!backend.backend) {
        throw new Error("You must specify a 'backend' property in your Backend entry: ".concat(JSON.stringify(backend)));
      }

      var instance = backend.backend(manager, context, backend.options);
      var id = backend.id; // Try to infer an `id` if one doesn't exist

      var inferName = !backend.id && instance && instance.constructor;

      if (inferName) {
        id = instance.constructor.name;
      }

      if (!id) {
        throw new Error("You must specify an 'id' property in your Backend entry: ".concat(JSON.stringify(backend), "\n        see this guide: https://github.com/louisbrunner/dnd-multi-backend/tree/master/packages/react-dnd-multi-backend#migrating-from-5xx"));
      } else if (inferName) {
        console.warn( // eslint-disable-line no-console
        "Deprecation notice: You are using a pipeline which doesn't include backends' 'id'.\n        This might be unsupported in the future, please specify 'id' explicitely for every backend.");
      }

      if (_classPrivateFieldGet(_this, _backends)[id]) {
        throw new Error("You must specify a unique 'id' property in your Backend entry:\n        ".concat(JSON.stringify(backend), " (conflicts with: ").concat(JSON.stringify(_classPrivateFieldGet(_this, _backends)[id]), ")"));
      }

      return {
        id: id,
        instance: instance,
        preview: (_backend$preview = backend.preview) !== null && _backend$preview !== void 0 ? _backend$preview : false,
        transition: backend.transition,
        skipDispatchOnTransition: (_backend$skipDispatch = backend.skipDispatchOnTransition) !== null && _backend$skipDispatch !== void 0 ? _backend$skipDispatch : false
      };
    }
  });

  _defineProperty(this, "setup", function () {
    if (typeof window === 'undefined') {
      return;
    }

    if (MultiBackendImpl.isSetUp) {
      throw new Error('Cannot have two MultiBackends at the same time.');
    }

    MultiBackendImpl.isSetUp = true;

    _classPrivateFieldGet(_this, _addEventListeners).call(_this, window);

    _classPrivateFieldGet(_this, _backends)[_classPrivateFieldGet(_this, _current)].instance.setup();
  });

  _defineProperty(this, "teardown", function () {
    if (typeof window === 'undefined') {
      return;
    }

    MultiBackendImpl.isSetUp = false;

    _classPrivateFieldGet(_this, _removeEventListeners).call(_this, window);

    _classPrivateFieldGet(_this, _backends)[_classPrivateFieldGet(_this, _current)].instance.teardown();
  });

  _defineProperty(this, "connectDragSource", function (sourceId, node, options) {
    return _classPrivateFieldGet(_this, _connectBackend).call(_this, 'connectDragSource', sourceId, node, options);
  });

  _defineProperty(this, "connectDragPreview", function (sourceId, node, options) {
    return _classPrivateFieldGet(_this, _connectBackend).call(_this, 'connectDragPreview', sourceId, node, options);
  });

  _defineProperty(this, "connectDropTarget", function (sourceId, node, options) {
    return _classPrivateFieldGet(_this, _connectBackend).call(_this, 'connectDropTarget', sourceId, node, options);
  });

  _defineProperty(this, "profile", function () {
    return _classPrivateFieldGet(_this, _backends)[_classPrivateFieldGet(_this, _current)].instance.profile();
  });

  _defineProperty(this, "previewEnabled", function () {
    return _classPrivateFieldGet(_this, _backends)[_classPrivateFieldGet(_this, _current)].preview;
  });

  _defineProperty(this, "previewsList", function () {
    return _classPrivateFieldGet(_this, _previews);
  });

  _defineProperty(this, "backendsList", function () {
    return _classPrivateFieldGet(_this, _backendsList);
  });

  _addEventListeners.set(this, {
    writable: true,
    value: function value(target) {
      _classPrivateFieldGet(_this, _backendsList).forEach(function (backend) {
        if (backend.transition) {
          target.addEventListener(backend.transition.event, _classPrivateFieldGet(_this, _backendSwitcher));
        }
      });
    }
  });

  _removeEventListeners.set(this, {
    writable: true,
    value: function value(target) {
      _classPrivateFieldGet(_this, _backendsList).forEach(function (backend) {
        if (backend.transition) {
          target.removeEventListener(backend.transition.event, _classPrivateFieldGet(_this, _backendSwitcher));
        }
      });
    }
  });

  _backendSwitcher.set(this, {
    writable: true,
    value: function value(event) {
      var oldBackend = _classPrivateFieldGet(_this, _current);

      _classPrivateFieldGet(_this, _backendsList).some(function (backend) {
        if (backend.id !== _classPrivateFieldGet(_this, _current) && backend.transition && backend.transition.check(event)) {
          _classPrivateFieldSet(_this, _current, backend.id);

          return true;
        }

        return false;
      });

      if (_classPrivateFieldGet(_this, _current) !== oldBackend) {
        var _event$target;

        _classPrivateFieldGet(_this, _backends)[oldBackend].instance.teardown();

        Object.keys(_classPrivateFieldGet(_this, _nodes)).forEach(function (id) {
          var _classPrivateFieldGet2;

          var node = _classPrivateFieldGet(_this, _nodes)[id];

          node.unsubscribe();
          node.unsubscribe = (_classPrivateFieldGet2 = _classPrivateFieldGet(_this, _callBackend)).call.apply(_classPrivateFieldGet2, [_this, node.func].concat(_toConsumableArray(node.args)));
        });

        _classPrivateFieldGet(_this, _previews).backendChanged(_this);

        var newBackend = _classPrivateFieldGet(_this, _backends)[_classPrivateFieldGet(_this, _current)];

        newBackend.instance.setup();

        if (newBackend.skipDispatchOnTransition) {
          return;
        }

        var newEvent = null;

        try {
          newEvent = event.constructor(event.type, event);
        } catch (_e) {
          newEvent = document.createEvent('Event');
          newEvent.initEvent(event.type, event.bubbles, event.cancelable);
        }

        (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.dispatchEvent(newEvent);
      }
    }
  });

  _callBackend.set(this, {
    writable: true,
    value: function value(func, sourceId, node, options) {
      return _classPrivateFieldGet(_this, _backends)[_classPrivateFieldGet(_this, _current)].instance[func](sourceId, node, options);
    }
  });

  _connectBackend.set(this, {
    writable: true,
    value: function value(func, sourceId, node, options) {
      var nodeId = "".concat(func, "_").concat(sourceId);

      var unsubscribe = _classPrivateFieldGet(_this, _callBackend).call(_this, func, sourceId, node, options);

      _classPrivateFieldGet(_this, _nodes)[nodeId] = {
        func: func,
        args: [sourceId, node, options],
        unsubscribe: unsubscribe
      };
      return function () {
        _classPrivateFieldGet(_this, _nodes)[nodeId].unsubscribe();

        delete _classPrivateFieldGet(_this, _nodes)[nodeId];
      };
    }
  });

  if (!_options || !_options.backends || _options.backends.length < 1) {
    throw new Error("You must specify at least one Backend, if you are coming from 2.x.x (or don't understand this error)\n        see this guide: https://github.com/louisbrunner/dnd-multi-backend/tree/master/packages/react-dnd-multi-backend#migrating-from-2xx");
  }

  _classPrivateFieldSet(this, _previews, new _PreviewListImpl.PreviewListImpl());

  _classPrivateFieldSet(this, _backends, {});

  _classPrivateFieldSet(this, _backendsList, []);

  _options.backends.forEach(function (backend) {
    var backendRecord = _classPrivateFieldGet(_this, _createBackend).call(_this, _manager, _context, backend);

    _classPrivateFieldGet(_this, _backends)[backendRecord.id] = backendRecord;

    _classPrivateFieldGet(_this, _backendsList).push(backendRecord);
  });

  _classPrivateFieldSet(this, _current, _classPrivateFieldGet(this, _backendsList)[0].id);

  _classPrivateFieldSet(this, _nodes, {});
};

exports.MultiBackendImpl = MultiBackendImpl;

_defineProperty(MultiBackendImpl, "isSetUp", false);