function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useState, useEffect, useCallback, useRef } from 'react';
import PropTypes from 'prop-types';
/**
 * Demo:
 * https://codepen.io/catamphetamine/pen/qBWxEQX
 *
 * `itemComponent` receives properties:
 * `dragging: boolean` — Is `true` when some item is being dragged.
 * `dragged: boolean` — Is `true` when this item is being dragged.
 * `style: object` — The `style` that must be set on the item root element.
 */

export default function SortableList(_ref) {
  var items = _ref.value,
      onChange = _ref.onChange,
      Component = _ref.component,
      ItemComponent = _ref.itemComponent,
      itemComponentProps = _ref.itemComponentProps,
      dragHandleDataAttribute = _ref.dragHandleDataAttribute,
      animationDuration = _ref.animationDuration,
      animationEasing = _ref.animationEasing,
      rest = _objectWithoutProperties(_ref, ["value", "onChange", "component", "itemComponent", "itemComponentProps", "dragHandleDataAttribute", "animationDuration", "animationEasing"]);

  var list = useRef();

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      dragging = _useState2[0],
      setDragging = _useState2[1];

  var _useState3 = useState(),
      _useState4 = _slicedToArray(_useState3, 2),
      willEndDragging = _useState4[0],
      setWillEndDragging = _useState4[1];

  var touchId = useRef();
  var dragMoveHandler = useRef();
  var draggedItemPosition = useRef();
  var itemShiftsY = useRef();
  var itemsOrder = useRef();
  var prevItems = useRef();

  if (items !== prevItems.current) {
    prevItems.current = items; // Reset items order.

    itemsOrder.current = items.map(function (item, i) {
      return i;
    });
  }

  useEffect(function () {
    // Don't know why is this here.
    var onTouchMove = function onTouchMove() {};

    window.addEventListener('touchmove', onTouchMove);
    return function () {
      window.removeEventListener('touchmove', onTouchMove);
    };
  }, []);
  var onDragStart = useCallback(function (node, y, touch) {
    if (dragging) {
      return;
    } // The list requires at least two items in order to be sortable.


    if (items.length === 1) {
      return;
    }

    var item = getItem(list.current, node, dragHandleDataAttribute);

    if (!item) {
      return;
    }

    var _item = _slicedToArray(item, 2),
        itemNode = _item[0],
        position = _item[1];

    setDragging({
      touch: touch,
      initialPosition: position,
      // Using `.getBoundingClientRect()` instead of `.offsetHeight`/`.offsetTop`
      // because `.offsetXxx` values don't know how to work with fractional pixels.
      // Fractional pixels (for example, `0.5`) are used on "retina" screens.
      itemHeights: Array.prototype.map.call(list.current.childNodes, function (node) {
        return node.getBoundingClientRect().height;
      }),
      itemSpacing: list.current.childNodes[1].getBoundingClientRect().top - list.current.childNodes[0].getBoundingClientRect().bottom,
      itemTopOffset: itemNode.getBoundingClientRect().top - list.current.childNodes[0].getBoundingClientRect().top,
      dragStartY: y
    });
    draggedItemPosition.current = {
      previous: position,
      "new": position,
      shiftY: 0
    };
    itemShiftsY.current = items.map(function (_) {
      return 0;
    });
  }, [dragging]);
  var onMouseDown = useCallback(function (event) {
    // Left mouse button only.
    if (event.button !== 0) {
      return;
    }

    onDragStart(event.target, event.pageY);
  }, [onDragStart]);
  var onTouchStart = useCallback(function (event) {
    // Single touch only.
    if (event.touches.length > 1) {
      return;
    }

    var touch = event.changedTouches[0];
    onDragStart(event.target, touch.pageY, touch.identifier);
  }, [onDragStart]);
  var onDragMove = useCallback(function (event) {
    if (!dragging) {
      return;
    }

    var y;

    if (dragging.touch !== undefined) {
      for (var _iterator = event.changedTouches, _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray) {
          if (_i2 >= _iterator.length) break;
          _ref2 = _iterator[_i2++];
        } else {
          _i2 = _iterator.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var touch = _ref2;

        if (touch.identifier === dragging.touch) {
          y = touch.pageY;
          break;
        }
      }
    } else {
      y = event.pageY;
    }

    if (y === undefined) {
      return;
    }

    event.preventDefault();
    var movedY = y - dragging.dragStartY;
    var draggedItemOffsetTop = dragging.itemTopOffset + movedY;
    var position = getDraggedItemPosition(dragging.itemHeights, dragging.itemSpacing, draggedItemOffsetTop, dragging.initialPosition);
    var draggedItemHeight = dragging.itemHeights[dragging.initialPosition]; // Update list items' positions.

    itemShiftsY.current = items.map(function (_, j) {
      if (j < dragging.initialPosition) {
        if (j >= position) {
          return draggedItemHeight + dragging.itemSpacing;
        } else {
          return 0;
        }
      } else if (j > dragging.initialPosition) {
        if (j <= position) {
          return -1 * (draggedItemHeight + dragging.itemSpacing);
        } else {
          return 0;
        }
      } else {
        return movedY;
      }
    }); // Apply item shifts Y.

    var i = 0;

    while (i < items.length) {
      list.current.childNodes[i].style.transform = "translateY(".concat(itemShiftsY.current[i], "px)");
      i++;
    }

    draggedItemPosition.current = {
      previous: dragging.initialPosition,
      "new": position,
      shiftY: getDraggedItemPositionY(dragging.itemHeights, dragging.itemSpacing, dragging.initialPosition, position) - getDraggedItemPositionY(dragging.itemHeights, dragging.itemSpacing, dragging.initialPosition, dragging.initialPosition)
    };
  }, [dragging]);
  var onDragEnd = useCallback(function () {
    setDragging();
    setWillEndDragging(true);
    var newItemsOrder = getNewItemsOrder(itemsOrder.current, draggedItemPosition.current.previous, draggedItemPosition.current["new"]);
    setTimeout(function () {
      setWillEndDragging(false);
      itemsOrder.current = newItemsOrder;
      onChange(newItemsOrder.map(function (i) {
        return items[i];
      }));
    }, animationDuration);
  }, [itemsOrder.current]);
  var onMouseUp = useCallback(function (event) {
    if (event.which !== 1) {
      return;
    }

    onDragEnd();
  }, [onDragEnd]);
  var onTouchEnd = useCallback(function (event) {
    for (var _iterator2 = event.changedTouches, _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray2) {
        if (_i3 >= _iterator2.length) break;
        _ref3 = _iterator2[_i3++];
      } else {
        _i3 = _iterator2.next();
        if (_i3.done) break;
        _ref3 = _i3.value;
      }

      var touch = _ref3;

      if (touch.identifier === touchId.current) {
        onDragEnd();
        return;
      }
    }
  }, [onDragEnd]);
  useEffect(function () {
    if (dragging) {
      dragMoveHandler.current = onDragMove;

      if (dragging.touch !== undefined) {
        touchId.current = dragging.touch;
        window.addEventListener('touchmove', dragMoveHandler.current, {
          passive: false
        });
        window.addEventListener('touchend', onTouchEnd);
      } else {
        window.addEventListener('mousemove', dragMoveHandler.current, {
          passive: false
        });
        window.addEventListener('mouseup', onMouseUp);
      }
    } else {
      if (touchId.current !== undefined) {
        touchId.current = undefined;
        window.removeEventListener('touchmove', dragMoveHandler.current, {
          passive: false
        });
        window.removeEventListener('touchend', onTouchEnd);
      } else {
        window.removeEventListener('mousemove', dragMoveHandler.current, {
          passive: false
        });
        window.removeEventListener('mouseup', onMouseUp);
      }

      dragMoveHandler.current = undefined;
    }
  }, [dragging]);
  useEffect(function () {
    if (willEndDragging) {
      // Reset dragged item position.
      list.current.childNodes[draggedItemPosition.current.previous].style.transform = "translateY(".concat(draggedItemPosition.current.shiftY, "px)");
    }
  }, [willEndDragging]);
  return React.createElement(Component, _extends({}, rest, {
    ref: list,
    onTouchStart: onTouchStart,
    onMouseDown: onMouseDown
  }), itemsOrder.current.map(function (i, position) {
    return React.createElement(ItemComponent, _extends({}, itemComponentProps, {
      key: i,
      dragging: dragging ? true : false,
      dragged: dragging && position === draggedItemPosition.current.previous,
      style: dragging || willEndDragging ? getItemStyle(position === draggedItemPosition.current.previous, willEndDragging, itemShiftsY.current[position], animationDuration, animationEasing) : TRANSFORM_NONE
    }), items[i]);
  }));
}
SortableList.propTypes = {
  value: PropTypes.arrayOf(PropTypes.any).isRequired,
  onChange: PropTypes.func.isRequired,
  component: PropTypes.elementType.isRequired,
  itemComponent: PropTypes.elementType.isRequired,
  itemComponentProps: PropTypes.object,
  animationDuration: PropTypes.number.isRequired,
  animationEasing: PropTypes.string.isRequired
};
var TRANSFORM_NONE = {
  transform: 'none'
};

function getItemStyle(isDragged, willEndDragging, shiftY, animationDuration, animationEasing) {
  var style = {
    // `position: relative` is for `z-index` to work.
    position: 'relative',
    transition: "all ".concat(animationDuration, "ms ").concat(animationEasing)
  };

  if (isDragged) {
    style.zIndex = 1;

    if (!willEndDragging) {
      style.transition = undefined;
    }
  } else {
    style.transform = "translateY(".concat(shiftY, "px)");
  }

  return style;
}

var ListComponent = React.forwardRef(function (_ref4, ref) {
  var children = _ref4.children,
      rest = _objectWithoutProperties(_ref4, ["children"]);

  return React.createElement("div", _extends({
    ref: ref
  }, rest), children);
});
SortableList.defaultProps = {
  component: ListComponent,
  animationDuration: 200,
  animationEasing: 'ease-out' // Interactive elements aren't draggable.

};
var IGNORE_CLICKS_INSIDE_TAGS = ['a', 'button', 'input', 'textarea', 'select'];
/**
 * Returns the list item that has been clicked (along with its index).
 * @param {Element} list
 * @param {Element} node — The DOM Element that has been clicked.
 * @param {string} [dragHandleDataAttribute] — Drag handle data attribute.
 * @return {any[]} [result] — An array having shape `[item, i]`.
 */

function getItem(list, node, dragHandleDataAttribute) {
  var handle;
  var childNode;

  while (node) {
    if (node === list) {
      // Clicked outside of a handle.
      if (dragHandleDataAttribute && !handle) {
        return;
      }

      if (childNode) {
        var i = 0;

        while (i < node.childNodes.length) {
          if (node.childNodes[i] === childNode) {
            return [childNode, i];
          }

          i++;
        }
      }

      break;
    }

    if (IGNORE_CLICKS_INSIDE_TAGS.indexOf(node.tagName.toLowerCase()) >= 0) {
      return;
    }

    if (node.dataset[dragHandleDataAttribute]) {
      handle = node;
    }

    childNode = node;
    node = node.parentElement;
  }
}

function getDraggedItemPosition(itemHeights, itemSpacing, draggedItemOffsetTop, initialPosition) {
  var scanLineY = draggedItemOffsetTop + itemHeights[initialPosition] / 2 + itemSpacing / 2;
  var y = 0;
  var i = 0;
  var subtractOwnPosition = 0;

  while (i < itemHeights.length) {
    y += itemHeights[i] + itemSpacing;

    if (scanLineY <= y) {
      return i;
    }

    i++;
  }

  return itemHeights.length - 1;
}

function getDraggedItemPositionY(itemHeights, itemSpacing, initialPosition, position) {
  var top = 0;
  var j = 0;

  while (j < position) {
    if (j === initialPosition) {
      position++;
    } else {
      top += itemHeights[j] + itemSpacing;
    }

    j++;
  }

  return top;
}

function getNewItemsOrder(itemsOrder, fromPosition, toPosition) {
  if (toPosition < fromPosition) {
    return itemsOrder.slice(0, toPosition).concat(itemsOrder[fromPosition]).concat(itemsOrder.slice(toPosition, fromPosition)).concat(itemsOrder.slice(fromPosition + 1));
  }

  if (toPosition > fromPosition) {
    return itemsOrder.slice(0, fromPosition).concat(itemsOrder.slice(fromPosition + 1, toPosition + 1)).concat(itemsOrder[fromPosition]).concat(itemsOrder.slice(toPosition + 1));
  }

  return itemsOrder.slice();
}
//# sourceMappingURL=SortableList.js.map