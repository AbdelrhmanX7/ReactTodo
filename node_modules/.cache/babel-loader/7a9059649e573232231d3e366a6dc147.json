{"ast":null,"code":"import _slicedToArray from \"E:/Front-End-Challenges/React-Challenges/Completed Challenges/ReactTodo/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect } from 'react';\nimport { useCollector } from './useCollector.js';\nimport { useDragDropManager } from './useDragDropManager.js';\n/**\n * useDragLayer Hook\n * @param collector The property collector\n */\n\nexport function useDragLayer(collect) {\n  var dragDropManager = useDragDropManager();\n  var monitor = dragDropManager.getMonitor();\n\n  var _useCollector = useCollector(monitor, collect),\n      _useCollector2 = _slicedToArray(_useCollector, 2),\n      collected = _useCollector2[0],\n      updateCollected = _useCollector2[1];\n\n  useEffect(function () {\n    return monitor.subscribeToOffsetChange(updateCollected);\n  });\n  useEffect(function () {\n    return monitor.subscribeToStateChange(updateCollected);\n  });\n  return collected;\n}","map":{"version":3,"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AAGA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,kBAAT,QAAmC,yBAAnC;AAEA;;;;;AAIA,OAAO,SAASC,YAAT,CACNC,OADM,EAEW;EACjB,IAAMC,eAAe,GAAGH,kBAAkB,EAA1C;EACA,IAAMI,OAAO,GAAGD,eAAe,CAACE,UAAhBF,EAAhB;;EACA,oBAAqCJ,YAAY,CAACK,OAAD,EAAUF,OAAV,CAAjD;EAAA;EAAA,IAAOI,SAAP;EAAA,IAAkBC,eAAlB;;EAEAT,SAAS,CAAC;IAAA,OAAMM,OAAO,CAACI,uBAARJ,CAAgCG,eAAhCH,CAAN;EAAA,CAAD,CAATN;EACAA,SAAS,CAAC;IAAA,OAAMM,OAAO,CAACK,sBAARL,CAA+BG,eAA/BH,CAAN;EAAA,CAAD,CAATN;EACA,OAAOQ,SAAP;AACA","names":["useEffect","useCollector","useDragDropManager","useDragLayer","collect","dragDropManager","monitor","getMonitor","collected","updateCollected","subscribeToOffsetChange","subscribeToStateChange"],"sources":["E:\\Front-End-Challenges\\React-Challenges\\Completed Challenges\\ReactTodo\\node_modules\\react-dnd\\src\\hooks\\useDragLayer.ts"],"sourcesContent":["import { useEffect } from 'react'\n\nimport type { DragLayerMonitor } from '../types/index.js'\nimport { useCollector } from './useCollector.js'\nimport { useDragDropManager } from './useDragDropManager.js'\n\n/**\n * useDragLayer Hook\n * @param collector The property collector\n */\nexport function useDragLayer<CollectedProps, DragObject = any>(\n\tcollect: (monitor: DragLayerMonitor<DragObject>) => CollectedProps,\n): CollectedProps {\n\tconst dragDropManager = useDragDropManager()\n\tconst monitor = dragDropManager.getMonitor()\n\tconst [collected, updateCollected] = useCollector(monitor, collect)\n\n\tuseEffect(() => monitor.subscribeToOffsetChange(updateCollected))\n\tuseEffect(() => monitor.subscribeToStateChange(updateCollected))\n\treturn collected\n}\n"]},"metadata":{},"sourceType":"module"}