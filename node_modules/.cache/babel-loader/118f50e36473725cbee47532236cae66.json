{"ast":null,"code":"// Used for MouseEvent.buttons (note the s on the end).\nconst MouseButtons = {\n  Left: 1,\n  Right: 2,\n  Center: 4\n}; // Used for e.button (note the lack of an s on the end).\n\nconst MouseButton = {\n  Left: 0,\n  Center: 1,\n  Right: 2\n};\n/**\n * Only touch events and mouse events where the left button is pressed should initiate a drag.\n * @param {MouseEvent | TouchEvent} e The event\n */\n\nexport function eventShouldStartDrag(e) {\n  // For touch events, button will be undefined. If e.button is defined,\n  // then it should be MouseButton.Left.\n  return e.button === undefined || e.button === MouseButton.Left;\n}\n/**\n * Only touch events and mouse events where the left mouse button is no longer held should end a drag.\n * It's possible the user mouse downs with the left mouse button, then mouse down and ups with the right mouse button.\n * We don't want releasing the right mouse button to end the drag.\n * @param {MouseEvent | TouchEvent} e The event\n */\n\nexport function eventShouldEndDrag(e) {\n  // Touch events will have buttons be undefined, while mouse events will have e.buttons's left button\n  // bit field unset if the left mouse button has been released\n  return e.buttons === undefined || (e.buttons & MouseButtons.Left) === 0;\n}\nexport function isTouchEvent(e) {\n  return !!e.targetTouches;\n}","map":{"version":3,"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG;EACpBC,IAAI,EAAE,CADc;EAEpBC,KAAK,EAAE,CAFa;EAGpBC,MAAM,EAAE;AAHY,CAArB,C,CAMA;;AACA,MAAMC,WAAW,GAAG;EACnBH,IAAI,EAAE,CADa;EAEnBE,MAAM,EAAE,CAFW;EAGnBD,KAAK,EAAE;AAHY,CAApB;AAMA;;;;;AAIA,OAAO,SAASG,oBAAT,CAA8BC,CAA9B,EAAsD;EAC5D;EACA;EACA,OAAOA,CAAC,CAACC,MAAFD,KAAaE,SAAbF,IAA0BA,CAAC,CAACC,MAAFD,KAAaF,WAAW,CAACH,IAA1D;AACA;AAED;;;;;;;AAMA,OAAO,SAASQ,kBAAT,CAA4BH,CAA5B,EAAoD;EAC1D;EACA;EACA,OAAOA,CAAC,CAACI,OAAFJ,KAAcE,SAAdF,IAA2B,CAACA,CAAC,CAACI,OAAFJ,GAAYN,YAAY,CAACC,IAA1B,MAAoC,CAAtE;AACA;AAED,OAAO,SAASU,YAAT,CACNL,CADM,EAEY;EAClB,OAAO,CAAC,CAACA,CAAE,CAAgBM,aAA3B;AACA","names":["MouseButtons","Left","Right","Center","MouseButton","eventShouldStartDrag","e","button","undefined","eventShouldEndDrag","buttons","isTouchEvent","targetTouches"],"sources":["E:\\Front-End-Challenges\\React-Challenges\\Completed Challenges\\ReactTodo\\node_modules\\react-dnd-touch-backend\\src\\utils\\predicates.ts"],"sourcesContent":["// Used for MouseEvent.buttons (note the s on the end).\nconst MouseButtons = {\n\tLeft: 1,\n\tRight: 2,\n\tCenter: 4,\n}\n\n// Used for e.button (note the lack of an s on the end).\nconst MouseButton = {\n\tLeft: 0,\n\tCenter: 1,\n\tRight: 2,\n}\n\n/**\n * Only touch events and mouse events where the left button is pressed should initiate a drag.\n * @param {MouseEvent | TouchEvent} e The event\n */\nexport function eventShouldStartDrag(e: MouseEvent): boolean {\n\t// For touch events, button will be undefined. If e.button is defined,\n\t// then it should be MouseButton.Left.\n\treturn e.button === undefined || e.button === MouseButton.Left\n}\n\n/**\n * Only touch events and mouse events where the left mouse button is no longer held should end a drag.\n * It's possible the user mouse downs with the left mouse button, then mouse down and ups with the right mouse button.\n * We don't want releasing the right mouse button to end the drag.\n * @param {MouseEvent | TouchEvent} e The event\n */\nexport function eventShouldEndDrag(e: MouseEvent): boolean {\n\t// Touch events will have buttons be undefined, while mouse events will have e.buttons's left button\n\t// bit field unset if the left mouse button has been released\n\treturn e.buttons === undefined || (e.buttons & MouseButtons.Left) === 0\n}\n\nexport function isTouchEvent(\n\te: Touch | TouchEvent | MouseEvent,\n): e is TouchEvent {\n\treturn !!(e as TouchEvent).targetTouches\n}\n"]},"metadata":{},"sourceType":"module"}