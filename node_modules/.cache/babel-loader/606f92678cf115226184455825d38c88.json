{"ast":null,"code":"import _classCallCheck from \"E:/Front-End-Challenges/React-Challenges/Completed Challenges/ReactTodo/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Front-End-Challenges/React-Challenges/Completed Challenges/ReactTodo/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { invariant } from '@react-dnd/invariant';\nvar isCallingCanDrag = false;\nvar isCallingIsDragging = false;\nexport var DragSourceMonitorImpl = /*#__PURE__*/function () {\n  function DragSourceMonitorImpl(manager) {\n    _classCallCheck(this, DragSourceMonitorImpl);\n\n    this.sourceId = null;\n    this.internalMonitor = manager.getMonitor();\n  }\n\n  _createClass(DragSourceMonitorImpl, [{\n    key: \"receiveHandlerId\",\n    value: function receiveHandlerId(sourceId) {\n      this.sourceId = sourceId;\n    }\n  }, {\n    key: \"getHandlerId\",\n    value: function getHandlerId() {\n      return this.sourceId;\n    }\n  }, {\n    key: \"canDrag\",\n    value: function canDrag() {\n      invariant(!isCallingCanDrag, 'You may not call monitor.canDrag() inside your canDrag() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor');\n\n      try {\n        isCallingCanDrag = true;\n        return this.internalMonitor.canDragSource(this.sourceId);\n      } finally {\n        isCallingCanDrag = false;\n      }\n    }\n  }, {\n    key: \"isDragging\",\n    value: function isDragging() {\n      if (!this.sourceId) {\n        return false;\n      }\n\n      invariant(!isCallingIsDragging, 'You may not call monitor.isDragging() inside your isDragging() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor');\n\n      try {\n        isCallingIsDragging = true;\n        return this.internalMonitor.isDraggingSource(this.sourceId);\n      } finally {\n        isCallingIsDragging = false;\n      }\n    }\n  }, {\n    key: \"subscribeToStateChange\",\n    value: function subscribeToStateChange(listener, options) {\n      return this.internalMonitor.subscribeToStateChange(listener, options);\n    }\n  }, {\n    key: \"isDraggingSource\",\n    value: function isDraggingSource(sourceId) {\n      return this.internalMonitor.isDraggingSource(sourceId);\n    }\n  }, {\n    key: \"isOverTarget\",\n    value: function isOverTarget(targetId, options) {\n      return this.internalMonitor.isOverTarget(targetId, options);\n    }\n  }, {\n    key: \"getTargetIds\",\n    value: function getTargetIds() {\n      return this.internalMonitor.getTargetIds();\n    }\n  }, {\n    key: \"isSourcePublic\",\n    value: function isSourcePublic() {\n      return this.internalMonitor.isSourcePublic();\n    }\n  }, {\n    key: \"getSourceId\",\n    value: function getSourceId() {\n      return this.internalMonitor.getSourceId();\n    }\n  }, {\n    key: \"subscribeToOffsetChange\",\n    value: function subscribeToOffsetChange(listener) {\n      return this.internalMonitor.subscribeToOffsetChange(listener);\n    }\n  }, {\n    key: \"canDragSource\",\n    value: function canDragSource(sourceId) {\n      return this.internalMonitor.canDragSource(sourceId);\n    }\n  }, {\n    key: \"canDropOnTarget\",\n    value: function canDropOnTarget(targetId) {\n      return this.internalMonitor.canDropOnTarget(targetId);\n    }\n  }, {\n    key: \"getItemType\",\n    value: function getItemType() {\n      return this.internalMonitor.getItemType();\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem() {\n      return this.internalMonitor.getItem();\n    }\n  }, {\n    key: \"getDropResult\",\n    value: function getDropResult() {\n      return this.internalMonitor.getDropResult();\n    }\n  }, {\n    key: \"didDrop\",\n    value: function didDrop() {\n      return this.internalMonitor.didDrop();\n    }\n  }, {\n    key: \"getInitialClientOffset\",\n    value: function getInitialClientOffset() {\n      return this.internalMonitor.getInitialClientOffset();\n    }\n  }, {\n    key: \"getInitialSourceClientOffset\",\n    value: function getInitialSourceClientOffset() {\n      return this.internalMonitor.getInitialSourceClientOffset();\n    }\n  }, {\n    key: \"getSourceClientOffset\",\n    value: function getSourceClientOffset() {\n      return this.internalMonitor.getSourceClientOffset();\n    }\n  }, {\n    key: \"getClientOffset\",\n    value: function getClientOffset() {\n      return this.internalMonitor.getClientOffset();\n    }\n  }, {\n    key: \"getDifferenceFromInitialOffset\",\n    value: function getDifferenceFromInitialOffset() {\n      return this.internalMonitor.getDifferenceFromInitialOffset();\n    }\n  }]);\n\n  return DragSourceMonitorImpl;\n}();","map":{"version":3,"mappings":"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","names":["invariant","isCallingCanDrag","isCallingIsDragging","DragSourceMonitorImpl","manager","sourceId","internalMonitor","getMonitor","canDragSource","isDraggingSource","listener","options","subscribeToStateChange","targetId","isOverTarget","getTargetIds","isSourcePublic","getSourceId","subscribeToOffsetChange","canDropOnTarget","getItemType","getItem","getDropResult","didDrop","getInitialClientOffset","getInitialSourceClientOffset","getSourceClientOffset","getClientOffset","getDifferenceFromInitialOffset"],"sources":["E:\\Front-End-Challenges\\React-Challenges\\Completed Challenges\\ReactTodo\\node_modules\\react-dnd\\src\\internals\\DragSourceMonitorImpl.ts"],"sourcesContent":["import { invariant } from '@react-dnd/invariant'\nimport type {\n\tDragDropManager,\n\tDragDropMonitor,\n\tIdentifier,\n\tListener,\n\tUnsubscribe,\n\tXYCoord,\n} from 'dnd-core'\n\nimport type { DragSourceMonitor } from '../types/index.js'\n\nlet isCallingCanDrag = false\nlet isCallingIsDragging = false\n\nexport class DragSourceMonitorImpl implements DragSourceMonitor {\n\tprivate internalMonitor: DragDropMonitor\n\tprivate sourceId: Identifier | null = null\n\n\tpublic constructor(manager: DragDropManager) {\n\t\tthis.internalMonitor = manager.getMonitor()\n\t}\n\n\tpublic receiveHandlerId(sourceId: Identifier | null): void {\n\t\tthis.sourceId = sourceId\n\t}\n\n\tpublic getHandlerId(): Identifier | null {\n\t\treturn this.sourceId\n\t}\n\n\tpublic canDrag(): boolean {\n\t\tinvariant(\n\t\t\t!isCallingCanDrag,\n\t\t\t'You may not call monitor.canDrag() inside your canDrag() implementation. ' +\n\t\t\t\t'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor',\n\t\t)\n\n\t\ttry {\n\t\t\tisCallingCanDrag = true\n\t\t\treturn this.internalMonitor.canDragSource(this.sourceId as Identifier)\n\t\t} finally {\n\t\t\tisCallingCanDrag = false\n\t\t}\n\t}\n\n\tpublic isDragging(): boolean {\n\t\tif (!this.sourceId) {\n\t\t\treturn false\n\t\t}\n\t\tinvariant(\n\t\t\t!isCallingIsDragging,\n\t\t\t'You may not call monitor.isDragging() inside your isDragging() implementation. ' +\n\t\t\t\t'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor',\n\t\t)\n\n\t\ttry {\n\t\t\tisCallingIsDragging = true\n\t\t\treturn this.internalMonitor.isDraggingSource(this.sourceId)\n\t\t} finally {\n\t\t\tisCallingIsDragging = false\n\t\t}\n\t}\n\n\tpublic subscribeToStateChange(\n\t\tlistener: Listener,\n\t\toptions?: { handlerIds?: Identifier[] },\n\t): Unsubscribe {\n\t\treturn this.internalMonitor.subscribeToStateChange(listener, options)\n\t}\n\n\tpublic isDraggingSource(sourceId: Identifier): boolean {\n\t\treturn this.internalMonitor.isDraggingSource(sourceId)\n\t}\n\n\tpublic isOverTarget(\n\t\ttargetId: Identifier,\n\t\toptions?: { shallow: boolean },\n\t): boolean {\n\t\treturn this.internalMonitor.isOverTarget(targetId, options)\n\t}\n\n\tpublic getTargetIds(): Identifier[] {\n\t\treturn this.internalMonitor.getTargetIds()\n\t}\n\n\tpublic isSourcePublic(): boolean | null {\n\t\treturn this.internalMonitor.isSourcePublic()\n\t}\n\n\tpublic getSourceId(): Identifier | null {\n\t\treturn this.internalMonitor.getSourceId()\n\t}\n\n\tpublic subscribeToOffsetChange(listener: Listener): Unsubscribe {\n\t\treturn this.internalMonitor.subscribeToOffsetChange(listener)\n\t}\n\n\tpublic canDragSource(sourceId: Identifier): boolean {\n\t\treturn this.internalMonitor.canDragSource(sourceId)\n\t}\n\n\tpublic canDropOnTarget(targetId: Identifier): boolean {\n\t\treturn this.internalMonitor.canDropOnTarget(targetId)\n\t}\n\n\tpublic getItemType(): Identifier | null {\n\t\treturn this.internalMonitor.getItemType()\n\t}\n\n\tpublic getItem(): any {\n\t\treturn this.internalMonitor.getItem()\n\t}\n\n\tpublic getDropResult(): any {\n\t\treturn this.internalMonitor.getDropResult()\n\t}\n\n\tpublic didDrop(): boolean {\n\t\treturn this.internalMonitor.didDrop()\n\t}\n\n\tpublic getInitialClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getInitialClientOffset()\n\t}\n\n\tpublic getInitialSourceClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getInitialSourceClientOffset()\n\t}\n\n\tpublic getSourceClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getSourceClientOffset()\n\t}\n\n\tpublic getClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getClientOffset()\n\t}\n\n\tpublic getDifferenceFromInitialOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getDifferenceFromInitialOffset()\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}