{"ast":null,"code":"import { invariant } from '@react-dnd/invariant';\nimport { ListenerType } from './interfaces.js';\nimport { OptionsReader } from './OptionsReader.js';\nimport { distance, inAngleRanges } from './utils/math.js';\nimport { getEventClientOffset, getNodeClientOffset } from './utils/offsets.js';\nimport { eventShouldEndDrag, eventShouldStartDrag, isTouchEvent } from './utils/predicates.js';\nimport { supportsPassive } from './utils/supportsPassive.js';\nconst eventNames = {\n  [ListenerType.mouse]: {\n    start: 'mousedown',\n    move: 'mousemove',\n    end: 'mouseup',\n    contextmenu: 'contextmenu'\n  },\n  [ListenerType.touch]: {\n    start: 'touchstart',\n    move: 'touchmove',\n    end: 'touchend'\n  },\n  [ListenerType.keyboard]: {\n    keydown: 'keydown'\n  }\n};\nexport class TouchBackendImpl {\n  /**\n  * Generate profiling statistics for the HTML5Backend.\n  */\n  profile() {\n    var ref;\n    return {\n      sourceNodes: this.sourceNodes.size,\n      sourcePreviewNodes: this.sourcePreviewNodes.size,\n      sourcePreviewNodeOptions: this.sourcePreviewNodeOptions.size,\n      targetNodes: this.targetNodes.size,\n      dragOverTargetIds: ((ref = this.dragOverTargetIds) === null || ref === void 0 ? void 0 : ref.length) || 0\n    };\n  } // public for test\n\n\n  get document() {\n    return this.options.document;\n  }\n\n  setup() {\n    const root = this.options.rootElement;\n\n    if (!root) {\n      return;\n    }\n\n    invariant(!TouchBackendImpl.isSetUp, 'Cannot have two Touch backends at the same time.');\n    TouchBackendImpl.isSetUp = true;\n    this.addEventListener(root, 'start', this.getTopMoveStartHandler());\n    this.addEventListener(root, 'start', this.handleTopMoveStartCapture, true);\n    this.addEventListener(root, 'move', this.handleTopMove);\n    this.addEventListener(root, 'move', this.handleTopMoveCapture, true);\n    this.addEventListener(root, 'end', this.handleTopMoveEndCapture, true);\n\n    if (this.options.enableMouseEvents && !this.options.ignoreContextMenu) {\n      this.addEventListener(root, 'contextmenu', this.handleTopMoveEndCapture);\n    }\n\n    if (this.options.enableKeyboardEvents) {\n      this.addEventListener(root, 'keydown', this.handleCancelOnEscape, true);\n    }\n  }\n\n  teardown() {\n    const root = this.options.rootElement;\n\n    if (!root) {\n      return;\n    }\n\n    TouchBackendImpl.isSetUp = false;\n    this._mouseClientOffset = {};\n    this.removeEventListener(root, 'start', this.handleTopMoveStartCapture, true);\n    this.removeEventListener(root, 'start', this.handleTopMoveStart);\n    this.removeEventListener(root, 'move', this.handleTopMoveCapture, true);\n    this.removeEventListener(root, 'move', this.handleTopMove);\n    this.removeEventListener(root, 'end', this.handleTopMoveEndCapture, true);\n\n    if (this.options.enableMouseEvents && !this.options.ignoreContextMenu) {\n      this.removeEventListener(root, 'contextmenu', this.handleTopMoveEndCapture);\n    }\n\n    if (this.options.enableKeyboardEvents) {\n      this.removeEventListener(root, 'keydown', this.handleCancelOnEscape, true);\n    }\n\n    this.uninstallSourceNodeRemovalObserver();\n  }\n\n  addEventListener(subject, event, handler) {\n    let capture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const options = supportsPassive ? {\n      capture,\n      passive: false\n    } : capture;\n    this.listenerTypes.forEach(function (listenerType) {\n      const evt = eventNames[listenerType][event];\n\n      if (evt) {\n        subject.addEventListener(evt, handler, options);\n      }\n    });\n  }\n\n  removeEventListener(subject, event, handler) {\n    let capture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const options = supportsPassive ? {\n      capture,\n      passive: false\n    } : capture;\n    this.listenerTypes.forEach(function (listenerType) {\n      const evt = eventNames[listenerType][event];\n\n      if (evt) {\n        subject.removeEventListener(evt, handler, options);\n      }\n    });\n  }\n\n  connectDragSource(sourceId, node) {\n    const handleMoveStart = this.handleMoveStart.bind(this, sourceId);\n    this.sourceNodes.set(sourceId, node);\n    this.addEventListener(node, 'start', handleMoveStart);\n    return () => {\n      this.sourceNodes.delete(sourceId);\n      this.removeEventListener(node, 'start', handleMoveStart);\n    };\n  }\n\n  connectDragPreview(sourceId, node, options) {\n    this.sourcePreviewNodeOptions.set(sourceId, options);\n    this.sourcePreviewNodes.set(sourceId, node);\n    return () => {\n      this.sourcePreviewNodes.delete(sourceId);\n      this.sourcePreviewNodeOptions.delete(sourceId);\n    };\n  }\n\n  connectDropTarget(targetId, node) {\n    const root = this.options.rootElement;\n\n    if (!this.document || !root) {\n      return () => {\n        /* noop */\n      };\n    }\n\n    const handleMove = e => {\n      if (!this.document || !root || !this.monitor.isDragging()) {\n        return;\n      }\n\n      let coords;\n      /**\n      * Grab the coordinates for the current mouse/touch position\n      */\n\n      switch (e.type) {\n        case eventNames.mouse.move:\n          coords = {\n            x: e.clientX,\n            y: e.clientY\n          };\n          break;\n\n        case eventNames.touch.move:\n          var ref, ref1;\n          coords = {\n            x: ((ref = e.touches[0]) === null || ref === void 0 ? void 0 : ref.clientX) || 0,\n            y: ((ref1 = e.touches[0]) === null || ref1 === void 0 ? void 0 : ref1.clientY) || 0\n          };\n          break;\n      }\n      /**\n      * Use the coordinates to grab the element the drag ended on.\n      * If the element is the same as the target node (or any of it's children) then we have hit a drop target and can handle the move.\n      */\n\n\n      const droppedOn = coords != null ? this.document.elementFromPoint(coords.x, coords.y) : undefined;\n      const childMatch = droppedOn && node.contains(droppedOn);\n\n      if (droppedOn === node || childMatch) {\n        return this.handleMove(e, targetId);\n      }\n    };\n    /**\n    * Attaching the event listener to the body so that touchmove will work while dragging over multiple target elements.\n    */\n\n\n    this.addEventListener(this.document.body, 'move', handleMove);\n    this.targetNodes.set(targetId, node);\n    return () => {\n      if (this.document) {\n        this.targetNodes.delete(targetId);\n        this.removeEventListener(this.document.body, 'move', handleMove);\n      }\n    };\n  }\n\n  getTopMoveStartHandler() {\n    if (!this.options.delayTouchStart && !this.options.delayMouseStart) {\n      return this.handleTopMoveStart;\n    }\n\n    return this.handleTopMoveStartDelay;\n  }\n\n  installSourceNodeRemovalObserver(node) {\n    this.uninstallSourceNodeRemovalObserver();\n    this.draggedSourceNode = node;\n    this.draggedSourceNodeRemovalObserver = new MutationObserver(() => {\n      if (node && !node.parentElement) {\n        this.resurrectSourceNode();\n        this.uninstallSourceNodeRemovalObserver();\n      }\n    });\n\n    if (!node || !node.parentElement) {\n      return;\n    }\n\n    this.draggedSourceNodeRemovalObserver.observe(node.parentElement, {\n      childList: true\n    });\n  }\n\n  resurrectSourceNode() {\n    if (this.document && this.draggedSourceNode) {\n      this.draggedSourceNode.style.display = 'none';\n      this.draggedSourceNode.removeAttribute('data-reactid');\n      this.document.body.appendChild(this.draggedSourceNode);\n    }\n  }\n\n  uninstallSourceNodeRemovalObserver() {\n    if (this.draggedSourceNodeRemovalObserver) {\n      this.draggedSourceNodeRemovalObserver.disconnect();\n    }\n\n    this.draggedSourceNodeRemovalObserver = undefined;\n    this.draggedSourceNode = undefined;\n  }\n\n  constructor(manager, context, options) {\n    this.getSourceClientOffset = sourceId => {\n      const element = this.sourceNodes.get(sourceId);\n      return element && getNodeClientOffset(element);\n    };\n\n    this.handleTopMoveStartCapture = e => {\n      if (!eventShouldStartDrag(e)) {\n        return;\n      }\n\n      this.moveStartSourceIds = [];\n    };\n\n    this.handleMoveStart = sourceId => {\n      // Just because we received an event doesn't necessarily mean we need to collect drag sources.\n      // We only collect start collecting drag sources on touch and left mouse events.\n      if (Array.isArray(this.moveStartSourceIds)) {\n        this.moveStartSourceIds.unshift(sourceId);\n      }\n    };\n\n    this.handleTopMoveStart = e => {\n      if (!eventShouldStartDrag(e)) {\n        return;\n      } // Don't prematurely preventDefault() here since it might:\n      // 1. Mess up scrolling\n      // 2. Mess up long tap (which brings up context menu)\n      // 3. If there's an anchor link as a child, tap won't be triggered on link\n\n\n      const clientOffset = getEventClientOffset(e);\n\n      if (clientOffset) {\n        if (isTouchEvent(e)) {\n          this.lastTargetTouchFallback = e.targetTouches[0];\n        }\n\n        this._mouseClientOffset = clientOffset;\n      }\n\n      this.waitingForDelay = false;\n    };\n\n    this.handleTopMoveStartDelay = e => {\n      if (!eventShouldStartDrag(e)) {\n        return;\n      }\n\n      const delay = e.type === eventNames.touch.start ? this.options.delayTouchStart : this.options.delayMouseStart;\n      this.timeout = setTimeout(this.handleTopMoveStart.bind(this, e), delay);\n      this.waitingForDelay = true;\n    };\n\n    this.handleTopMoveCapture = () => {\n      this.dragOverTargetIds = [];\n    };\n\n    this.handleMove = (_evt, targetId) => {\n      if (this.dragOverTargetIds) {\n        this.dragOverTargetIds.unshift(targetId);\n      }\n    };\n\n    this.handleTopMove = e1 => {\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n\n      if (!this.document || this.waitingForDelay) {\n        return;\n      }\n\n      const {\n        moveStartSourceIds,\n        dragOverTargetIds\n      } = this;\n      const enableHoverOutsideTarget = this.options.enableHoverOutsideTarget;\n      const clientOffset = getEventClientOffset(e1, this.lastTargetTouchFallback);\n\n      if (!clientOffset) {\n        return;\n      } // If the touch move started as a scroll, or is is between the scroll angles\n\n\n      if (this._isScrolling || !this.monitor.isDragging() && inAngleRanges(this._mouseClientOffset.x || 0, this._mouseClientOffset.y || 0, clientOffset.x, clientOffset.y, this.options.scrollAngleRanges)) {\n        this._isScrolling = true;\n        return;\n      } // If we're not dragging and we've moved a little, that counts as a drag start\n\n\n      if (!this.monitor.isDragging() && // eslint-disable-next-line no-prototype-builtins\n      this._mouseClientOffset.hasOwnProperty('x') && moveStartSourceIds && distance(this._mouseClientOffset.x || 0, this._mouseClientOffset.y || 0, clientOffset.x, clientOffset.y) > (this.options.touchSlop ? this.options.touchSlop : 0)) {\n        this.moveStartSourceIds = undefined;\n        this.actions.beginDrag(moveStartSourceIds, {\n          clientOffset: this._mouseClientOffset,\n          getSourceClientOffset: this.getSourceClientOffset,\n          publishSource: false\n        });\n      }\n\n      if (!this.monitor.isDragging()) {\n        return;\n      }\n\n      const sourceNode = this.sourceNodes.get(this.monitor.getSourceId());\n      this.installSourceNodeRemovalObserver(sourceNode);\n      this.actions.publishDragSource();\n      if (e1.cancelable) e1.preventDefault(); // Get the node elements of the hovered DropTargets\n\n      const dragOverTargetNodes = (dragOverTargetIds || []).map(key => this.targetNodes.get(key)).filter(e => !!e); // Get the a ordered list of nodes that are touched by\n\n      const elementsAtPoint = this.options.getDropTargetElementsAtPoint ? this.options.getDropTargetElementsAtPoint(clientOffset.x, clientOffset.y, dragOverTargetNodes) : this.document.elementsFromPoint(clientOffset.x, clientOffset.y); // Extend list with parents that are not receiving elementsFromPoint events (size 0 elements and svg groups)\n\n      const elementsAtPointExtended = [];\n\n      for (const nodeId in elementsAtPoint) {\n        // eslint-disable-next-line no-prototype-builtins\n        if (!elementsAtPoint.hasOwnProperty(nodeId)) {\n          continue;\n        }\n\n        let currentNode = elementsAtPoint[nodeId];\n\n        if (currentNode != null) {\n          elementsAtPointExtended.push(currentNode);\n        }\n\n        while (currentNode) {\n          currentNode = currentNode.parentElement;\n\n          if (currentNode && elementsAtPointExtended.indexOf(currentNode) === -1) {\n            elementsAtPointExtended.push(currentNode);\n          }\n        }\n      }\n\n      const orderedDragOverTargetIds = elementsAtPointExtended // Filter off nodes that arent a hovered DropTargets nodes\n      .filter(node => dragOverTargetNodes.indexOf(node) > -1) // Map back the nodes elements to targetIds\n      .map(node => this._getDropTargetId(node)) // Filter off possible null rows\n      .filter(node => !!node).filter((id, index, ids) => ids.indexOf(id) === index); // Invoke hover for drop targets when source node is still over and pointer is outside\n\n      if (enableHoverOutsideTarget) {\n        for (const targetId in this.targetNodes) {\n          const targetNode = this.targetNodes.get(targetId);\n\n          if (sourceNode && targetNode && targetNode.contains(sourceNode) && orderedDragOverTargetIds.indexOf(targetId) === -1) {\n            orderedDragOverTargetIds.unshift(targetId);\n            break;\n          }\n        }\n      } // Reverse order because dnd-core reverse it before calling the DropTarget drop methods\n\n\n      orderedDragOverTargetIds.reverse();\n      this.actions.hover(orderedDragOverTargetIds, {\n        clientOffset: clientOffset\n      });\n    };\n    /**\n    *\n    * visible for testing\n    */\n\n\n    this._getDropTargetId = node => {\n      const keys = this.targetNodes.keys();\n      let next = keys.next();\n\n      while (next.done === false) {\n        const targetId = next.value;\n\n        if (node === this.targetNodes.get(targetId)) {\n          return targetId;\n        } else {\n          next = keys.next();\n        }\n      }\n\n      return undefined;\n    };\n\n    this.handleTopMoveEndCapture = e => {\n      this._isScrolling = false;\n      this.lastTargetTouchFallback = undefined;\n\n      if (!eventShouldEndDrag(e)) {\n        return;\n      }\n\n      if (!this.monitor.isDragging() || this.monitor.didDrop()) {\n        this.moveStartSourceIds = undefined;\n        return;\n      }\n\n      if (e.cancelable) e.preventDefault();\n      this._mouseClientOffset = {};\n      this.uninstallSourceNodeRemovalObserver();\n      this.actions.drop();\n      this.actions.endDrag();\n    };\n\n    this.handleCancelOnEscape = e => {\n      if (e.key === 'Escape' && this.monitor.isDragging()) {\n        this._mouseClientOffset = {};\n        this.uninstallSourceNodeRemovalObserver();\n        this.actions.endDrag();\n      }\n    };\n\n    this.options = new OptionsReader(options, context);\n    this.actions = manager.getActions();\n    this.monitor = manager.getMonitor();\n    this.sourceNodes = new Map();\n    this.sourcePreviewNodes = new Map();\n    this.sourcePreviewNodeOptions = new Map();\n    this.targetNodes = new Map();\n    this.listenerTypes = [];\n    this._mouseClientOffset = {};\n    this._isScrolling = false;\n\n    if (this.options.enableMouseEvents) {\n      this.listenerTypes.push(ListenerType.mouse);\n    }\n\n    if (this.options.enableTouchEvents) {\n      this.listenerTypes.push(ListenerType.touch);\n    }\n\n    if (this.options.enableKeyboardEvents) {\n      this.listenerTypes.push(ListenerType.keyboard);\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["invariant","ListenerType","OptionsReader","distance","inAngleRanges","getEventClientOffset","getNodeClientOffset","eventShouldEndDrag","eventShouldStartDrag","isTouchEvent","supportsPassive","eventNames","mouse","start","move","end","contextmenu","touch","keyboard","keydown","TouchBackendImpl","profile","ref","sourceNodes","size","sourcePreviewNodes","sourcePreviewNodeOptions","targetNodes","dragOverTargetIds","length","document","options","setup","root","rootElement","isSetUp","addEventListener","getTopMoveStartHandler","handleTopMoveStartCapture","handleTopMove","handleTopMoveCapture","handleTopMoveEndCapture","enableMouseEvents","ignoreContextMenu","enableKeyboardEvents","handleCancelOnEscape","teardown","_mouseClientOffset","removeEventListener","handleTopMoveStart","uninstallSourceNodeRemovalObserver","subject","event","handler","capture","passive","listenerTypes","forEach","listenerType","evt","connectDragSource","sourceId","node","handleMoveStart","bind","set","delete","connectDragPreview","connectDropTarget","targetId","handleMove","e","monitor","isDragging","coords","type","x","clientX","y","clientY","ref1","touches","droppedOn","elementFromPoint","undefined","childMatch","contains","body","delayTouchStart","delayMouseStart","handleTopMoveStartDelay","installSourceNodeRemovalObserver","draggedSourceNode","draggedSourceNodeRemovalObserver","MutationObserver","parentElement","resurrectSourceNode","observe","childList","style","display","removeAttribute","appendChild","disconnect","constructor","manager","context","getSourceClientOffset","element","get","moveStartSourceIds","Array","isArray","unshift","clientOffset","lastTargetTouchFallback","targetTouches","waitingForDelay","delay","timeout","setTimeout","_evt","clearTimeout","enableHoverOutsideTarget","_isScrolling","scrollAngleRanges","hasOwnProperty","touchSlop","actions","beginDrag","publishSource","sourceNode","getSourceId","publishDragSource","cancelable","preventDefault","dragOverTargetNodes","map","key","filter","elementsAtPoint","getDropTargetElementsAtPoint","elementsFromPoint","elementsAtPointExtended","nodeId","currentNode","push","indexOf","orderedDragOverTargetIds","_getDropTargetId","id","index","ids","targetNode","reverse","hover","keys","next","done","value","didDrop","drop","endDrag","getActions","getMonitor","Map","enableTouchEvents"],"sources":["E:\\Front-End-Challenges\\React-Challenges\\Completed Challenges\\ReactTodo\\node_modules\\react-dnd-touch-backend\\src\\TouchBackendImpl.ts"],"sourcesContent":["import { invariant } from '@react-dnd/invariant'\nimport type {\n\tBackend,\n\tDragDropActions,\n\tDragDropManager,\n\tDragDropMonitor,\n\tIdentifier,\n\tUnsubscribe,\n\tXYCoord,\n} from 'dnd-core'\n\nimport type {\n\tEventName,\n\tTouchBackendContext,\n\tTouchBackendOptions,\n} from './interfaces.js'\nimport { ListenerType } from './interfaces.js'\nimport { OptionsReader } from './OptionsReader.js'\nimport { distance, inAngleRanges } from './utils/math.js'\nimport { getEventClientOffset, getNodeClientOffset } from './utils/offsets.js'\nimport {\n\teventShouldEndDrag,\n\teventShouldStartDrag,\n\tisTouchEvent,\n} from './utils/predicates.js'\nimport { supportsPassive } from './utils/supportsPassive.js'\n\nconst eventNames: Record<ListenerType, EventName> = {\n\t[ListenerType.mouse]: {\n\t\tstart: 'mousedown',\n\t\tmove: 'mousemove',\n\t\tend: 'mouseup',\n\t\tcontextmenu: 'contextmenu',\n\t},\n\t[ListenerType.touch]: {\n\t\tstart: 'touchstart',\n\t\tmove: 'touchmove',\n\t\tend: 'touchend',\n\t},\n\t[ListenerType.keyboard]: {\n\t\tkeydown: 'keydown',\n\t},\n}\n\nexport class TouchBackendImpl implements Backend {\n\tprivate options: OptionsReader\n\n\t// React-DnD Dependencies\n\tprivate actions: DragDropActions\n\tprivate monitor: DragDropMonitor\n\n\t// Internal State\n\tprivate static isSetUp: boolean\n\tpublic sourceNodes: Map<Identifier, HTMLElement>\n\tpublic sourcePreviewNodes: Map<string, HTMLElement>\n\tpublic sourcePreviewNodeOptions: Map<string, any>\n\tpublic targetNodes: Map<string, HTMLElement>\n\tprivate _mouseClientOffset: Partial<XYCoord>\n\tprivate _isScrolling: boolean\n\tprivate listenerTypes: ListenerType[]\n\tprivate moveStartSourceIds: string[] | undefined\n\tprivate waitingForDelay: boolean | undefined\n\tprivate timeout: ReturnType<typeof setTimeout> | undefined\n\tprivate dragOverTargetIds: string[] | undefined\n\tprivate draggedSourceNode: HTMLElement | undefined\n\tprivate draggedSourceNodeRemovalObserver: MutationObserver | undefined\n\n\t// Patch for iOS 13, discussion over #1585\n\tprivate lastTargetTouchFallback: Touch | undefined\n\n\tpublic constructor(\n\t\tmanager: DragDropManager,\n\t\tcontext: TouchBackendContext,\n\t\toptions: Partial<TouchBackendOptions>,\n\t) {\n\t\tthis.options = new OptionsReader(options, context)\n\t\tthis.actions = manager.getActions()\n\t\tthis.monitor = manager.getMonitor()\n\n\t\tthis.sourceNodes = new Map()\n\t\tthis.sourcePreviewNodes = new Map()\n\t\tthis.sourcePreviewNodeOptions = new Map()\n\t\tthis.targetNodes = new Map()\n\t\tthis.listenerTypes = []\n\t\tthis._mouseClientOffset = {}\n\t\tthis._isScrolling = false\n\n\t\tif (this.options.enableMouseEvents) {\n\t\t\tthis.listenerTypes.push(ListenerType.mouse)\n\t\t}\n\n\t\tif (this.options.enableTouchEvents) {\n\t\t\tthis.listenerTypes.push(ListenerType.touch)\n\t\t}\n\n\t\tif (this.options.enableKeyboardEvents) {\n\t\t\tthis.listenerTypes.push(ListenerType.keyboard)\n\t\t}\n\t}\n\n\t/**\n\t * Generate profiling statistics for the HTML5Backend.\n\t */\n\tpublic profile(): Record<string, number> {\n\t\treturn {\n\t\t\tsourceNodes: this.sourceNodes.size,\n\t\t\tsourcePreviewNodes: this.sourcePreviewNodes.size,\n\t\t\tsourcePreviewNodeOptions: this.sourcePreviewNodeOptions.size,\n\t\t\ttargetNodes: this.targetNodes.size,\n\t\t\tdragOverTargetIds: this.dragOverTargetIds?.length || 0,\n\t\t}\n\t}\n\n\t// public for test\n\tpublic get document(): Document | undefined {\n\t\treturn this.options.document\n\t}\n\n\tpublic setup(): void {\n\t\tconst root = this.options.rootElement\n\t\tif (!root) {\n\t\t\treturn\n\t\t}\n\n\t\tinvariant(\n\t\t\t!TouchBackendImpl.isSetUp,\n\t\t\t'Cannot have two Touch backends at the same time.',\n\t\t)\n\t\tTouchBackendImpl.isSetUp = true\n\n\t\tthis.addEventListener(root, 'start', this.getTopMoveStartHandler() as any)\n\t\tthis.addEventListener(\n\t\t\troot,\n\t\t\t'start',\n\t\t\tthis.handleTopMoveStartCapture as any,\n\t\t\ttrue,\n\t\t)\n\t\tthis.addEventListener(root, 'move', this.handleTopMove as any)\n\t\tthis.addEventListener(root, 'move', this.handleTopMoveCapture, true)\n\t\tthis.addEventListener(\n\t\t\troot,\n\t\t\t'end',\n\t\t\tthis.handleTopMoveEndCapture as any,\n\t\t\ttrue,\n\t\t)\n\n\t\tif (this.options.enableMouseEvents && !this.options.ignoreContextMenu) {\n\t\t\tthis.addEventListener(\n\t\t\t\troot,\n\t\t\t\t'contextmenu',\n\t\t\t\tthis.handleTopMoveEndCapture as any,\n\t\t\t)\n\t\t}\n\n\t\tif (this.options.enableKeyboardEvents) {\n\t\t\tthis.addEventListener(\n\t\t\t\troot,\n\t\t\t\t'keydown',\n\t\t\t\tthis.handleCancelOnEscape as any,\n\t\t\t\ttrue,\n\t\t\t)\n\t\t}\n\t}\n\n\tpublic teardown(): void {\n\t\tconst root = this.options.rootElement\n\t\tif (!root) {\n\t\t\treturn\n\t\t}\n\n\t\tTouchBackendImpl.isSetUp = false\n\t\tthis._mouseClientOffset = {}\n\n\t\tthis.removeEventListener(\n\t\t\troot,\n\t\t\t'start',\n\t\t\tthis.handleTopMoveStartCapture as any,\n\t\t\ttrue,\n\t\t)\n\t\tthis.removeEventListener(root, 'start', this.handleTopMoveStart as any)\n\t\tthis.removeEventListener(root, 'move', this.handleTopMoveCapture, true)\n\t\tthis.removeEventListener(root, 'move', this.handleTopMove as any)\n\t\tthis.removeEventListener(\n\t\t\troot,\n\t\t\t'end',\n\t\t\tthis.handleTopMoveEndCapture as any,\n\t\t\ttrue,\n\t\t)\n\n\t\tif (this.options.enableMouseEvents && !this.options.ignoreContextMenu) {\n\t\t\tthis.removeEventListener(\n\t\t\t\troot,\n\t\t\t\t'contextmenu',\n\t\t\t\tthis.handleTopMoveEndCapture as any,\n\t\t\t)\n\t\t}\n\n\t\tif (this.options.enableKeyboardEvents) {\n\t\t\tthis.removeEventListener(\n\t\t\t\troot,\n\t\t\t\t'keydown',\n\t\t\t\tthis.handleCancelOnEscape as any,\n\t\t\t\ttrue,\n\t\t\t)\n\t\t}\n\n\t\tthis.uninstallSourceNodeRemovalObserver()\n\t}\n\n\tprivate addEventListener<K extends keyof EventName>(\n\t\tsubject: Node,\n\t\tevent: K,\n\t\thandler: (e: any) => void,\n\t\tcapture = false,\n\t) {\n\t\tconst options = supportsPassive ? { capture, passive: false } : capture\n\n\t\tthis.listenerTypes.forEach(function (listenerType) {\n\t\t\tconst evt = eventNames[listenerType][event]\n\n\t\t\tif (evt) {\n\t\t\t\tsubject.addEventListener(evt as any, handler as any, options)\n\t\t\t}\n\t\t})\n\t}\n\n\tprivate removeEventListener<K extends keyof EventName>(\n\t\tsubject: Node,\n\t\tevent: K,\n\t\thandler: (e: any) => void,\n\t\tcapture = false,\n\t) {\n\t\tconst options = supportsPassive ? { capture, passive: false } : capture\n\n\t\tthis.listenerTypes.forEach(function (listenerType) {\n\t\t\tconst evt = eventNames[listenerType][event]\n\n\t\t\tif (evt) {\n\t\t\t\tsubject.removeEventListener(evt as any, handler as any, options)\n\t\t\t}\n\t\t})\n\t}\n\n\tpublic connectDragSource(sourceId: string, node: HTMLElement): Unsubscribe {\n\t\tconst handleMoveStart = this.handleMoveStart.bind(this, sourceId)\n\t\tthis.sourceNodes.set(sourceId, node)\n\n\t\tthis.addEventListener(node, 'start', handleMoveStart)\n\n\t\treturn (): void => {\n\t\t\tthis.sourceNodes.delete(sourceId)\n\t\t\tthis.removeEventListener(node, 'start', handleMoveStart)\n\t\t}\n\t}\n\n\tpublic connectDragPreview(\n\t\tsourceId: string,\n\t\tnode: HTMLElement,\n\t\toptions: unknown,\n\t): Unsubscribe {\n\t\tthis.sourcePreviewNodeOptions.set(sourceId, options)\n\t\tthis.sourcePreviewNodes.set(sourceId, node)\n\n\t\treturn (): void => {\n\t\t\tthis.sourcePreviewNodes.delete(sourceId)\n\t\t\tthis.sourcePreviewNodeOptions.delete(sourceId)\n\t\t}\n\t}\n\n\tpublic connectDropTarget(targetId: string, node: HTMLElement): Unsubscribe {\n\t\tconst root = this.options.rootElement\n\t\tif (!this.document || !root) {\n\t\t\treturn (): void => {\n\t\t\t\t/* noop */\n\t\t\t}\n\t\t}\n\n\t\tconst handleMove = (e: MouseEvent | TouchEvent) => {\n\t\t\tif (!this.document || !root || !this.monitor.isDragging()) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tlet coords\n\n\t\t\t/**\n\t\t\t * Grab the coordinates for the current mouse/touch position\n\t\t\t */\n\t\t\tswitch (e.type) {\n\t\t\t\tcase eventNames.mouse.move:\n\t\t\t\t\tcoords = {\n\t\t\t\t\t\tx: (e as MouseEvent).clientX,\n\t\t\t\t\t\ty: (e as MouseEvent).clientY,\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\n\t\t\t\tcase eventNames.touch.move:\n\t\t\t\t\tcoords = {\n\t\t\t\t\t\tx: (e as TouchEvent).touches[0]?.clientX || 0,\n\t\t\t\t\t\ty: (e as TouchEvent).touches[0]?.clientY || 0,\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Use the coordinates to grab the element the drag ended on.\n\t\t\t * If the element is the same as the target node (or any of it's children) then we have hit a drop target and can handle the move.\n\t\t\t */\n\t\t\tconst droppedOn =\n\t\t\t\tcoords != null\n\t\t\t\t\t? this.document.elementFromPoint(coords.x, coords.y)\n\t\t\t\t\t: undefined\n\t\t\tconst childMatch = droppedOn && node.contains(droppedOn)\n\n\t\t\tif (droppedOn === node || childMatch) {\n\t\t\t\treturn this.handleMove(e, targetId)\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Attaching the event listener to the body so that touchmove will work while dragging over multiple target elements.\n\t\t */\n\t\tthis.addEventListener(this.document.body, 'move', handleMove as any)\n\t\tthis.targetNodes.set(targetId, node)\n\n\t\treturn (): void => {\n\t\t\tif (this.document) {\n\t\t\t\tthis.targetNodes.delete(targetId)\n\t\t\t\tthis.removeEventListener(this.document.body, 'move', handleMove as any)\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getSourceClientOffset = (sourceId: string): XYCoord | undefined => {\n\t\tconst element = this.sourceNodes.get(sourceId)\n\t\treturn element && getNodeClientOffset(element)\n\t}\n\n\tpublic handleTopMoveStartCapture = (e: Event): void => {\n\t\tif (!eventShouldStartDrag(e as MouseEvent)) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.moveStartSourceIds = []\n\t}\n\n\tpublic handleMoveStart = (sourceId: string): void => {\n\t\t// Just because we received an event doesn't necessarily mean we need to collect drag sources.\n\t\t// We only collect start collecting drag sources on touch and left mouse events.\n\t\tif (Array.isArray(this.moveStartSourceIds)) {\n\t\t\tthis.moveStartSourceIds.unshift(sourceId)\n\t\t}\n\t}\n\n\tprivate getTopMoveStartHandler() {\n\t\tif (!this.options.delayTouchStart && !this.options.delayMouseStart) {\n\t\t\treturn this.handleTopMoveStart\n\t\t}\n\n\t\treturn this.handleTopMoveStartDelay\n\t}\n\n\tpublic handleTopMoveStart = (e: MouseEvent | TouchEvent): void => {\n\t\tif (!eventShouldStartDrag(e as MouseEvent)) {\n\t\t\treturn\n\t\t}\n\n\t\t// Don't prematurely preventDefault() here since it might:\n\t\t// 1. Mess up scrolling\n\t\t// 2. Mess up long tap (which brings up context menu)\n\t\t// 3. If there's an anchor link as a child, tap won't be triggered on link\n\n\t\tconst clientOffset = getEventClientOffset(e)\n\t\tif (clientOffset) {\n\t\t\tif (isTouchEvent(e)) {\n\t\t\t\tthis.lastTargetTouchFallback = e.targetTouches[0]\n\t\t\t}\n\t\t\tthis._mouseClientOffset = clientOffset\n\t\t}\n\t\tthis.waitingForDelay = false\n\t}\n\n\tpublic handleTopMoveStartDelay = (e: Event): void => {\n\t\tif (!eventShouldStartDrag(e as MouseEvent)) {\n\t\t\treturn\n\t\t}\n\n\t\tconst delay =\n\t\t\te.type === eventNames.touch.start\n\t\t\t\t? this.options.delayTouchStart\n\t\t\t\t: this.options.delayMouseStart\n\t\tthis.timeout = setTimeout(\n\t\t\tthis.handleTopMoveStart.bind(this, e as any),\n\t\t\tdelay,\n\t\t) as any as ReturnType<typeof setTimeout>\n\t\tthis.waitingForDelay = true\n\t}\n\n\tpublic handleTopMoveCapture = (): void => {\n\t\tthis.dragOverTargetIds = []\n\t}\n\n\tpublic handleMove = (\n\t\t_evt: MouseEvent | TouchEvent,\n\t\ttargetId: string,\n\t): void => {\n\t\tif (this.dragOverTargetIds) {\n\t\t\tthis.dragOverTargetIds.unshift(targetId)\n\t\t}\n\t}\n\n\tpublic handleTopMove = (e: TouchEvent | MouseEvent): void => {\n\t\tif (this.timeout) {\n\t\t\tclearTimeout(this.timeout)\n\t\t}\n\t\tif (!this.document || this.waitingForDelay) {\n\t\t\treturn\n\t\t}\n\t\tconst { moveStartSourceIds, dragOverTargetIds } = this\n\t\tconst enableHoverOutsideTarget = this.options.enableHoverOutsideTarget\n\n\t\tconst clientOffset = getEventClientOffset(e, this.lastTargetTouchFallback)\n\n\t\tif (!clientOffset) {\n\t\t\treturn\n\t\t}\n\n\t\t// If the touch move started as a scroll, or is is between the scroll angles\n\t\tif (\n\t\t\tthis._isScrolling ||\n\t\t\t(!this.monitor.isDragging() &&\n\t\t\t\tinAngleRanges(\n\t\t\t\t\tthis._mouseClientOffset.x || 0,\n\t\t\t\t\tthis._mouseClientOffset.y || 0,\n\t\t\t\t\tclientOffset.x,\n\t\t\t\t\tclientOffset.y,\n\t\t\t\t\tthis.options.scrollAngleRanges,\n\t\t\t\t))\n\t\t) {\n\t\t\tthis._isScrolling = true\n\t\t\treturn\n\t\t}\n\n\t\t// If we're not dragging and we've moved a little, that counts as a drag start\n\t\tif (\n\t\t\t!this.monitor.isDragging() &&\n\t\t\t// eslint-disable-next-line no-prototype-builtins\n\t\t\tthis._mouseClientOffset.hasOwnProperty('x') &&\n\t\t\tmoveStartSourceIds &&\n\t\t\tdistance(\n\t\t\t\tthis._mouseClientOffset.x || 0,\n\t\t\t\tthis._mouseClientOffset.y || 0,\n\t\t\t\tclientOffset.x,\n\t\t\t\tclientOffset.y,\n\t\t\t) > (this.options.touchSlop ? this.options.touchSlop : 0)\n\t\t) {\n\t\t\tthis.moveStartSourceIds = undefined\n\n\t\t\tthis.actions.beginDrag(moveStartSourceIds, {\n\t\t\t\tclientOffset: this._mouseClientOffset,\n\t\t\t\tgetSourceClientOffset: this.getSourceClientOffset,\n\t\t\t\tpublishSource: false,\n\t\t\t})\n\t\t}\n\n\t\tif (!this.monitor.isDragging()) {\n\t\t\treturn\n\t\t}\n\n\t\tconst sourceNode = this.sourceNodes.get(\n\t\t\tthis.monitor.getSourceId() as string,\n\t\t)\n\t\tthis.installSourceNodeRemovalObserver(sourceNode)\n\t\tthis.actions.publishDragSource()\n\n\t\tif (e.cancelable) e.preventDefault()\n\n\t\t// Get the node elements of the hovered DropTargets\n\t\tconst dragOverTargetNodes: HTMLElement[] = (dragOverTargetIds || [])\n\t\t\t.map((key) => this.targetNodes.get(key))\n\t\t\t.filter((e) => !!e) as HTMLElement[]\n\n\t\t// Get the a ordered list of nodes that are touched by\n\t\tconst elementsAtPoint = this.options.getDropTargetElementsAtPoint\n\t\t\t? this.options.getDropTargetElementsAtPoint(\n\t\t\t\t\tclientOffset.x,\n\t\t\t\t\tclientOffset.y,\n\t\t\t\t\tdragOverTargetNodes,\n\t\t\t  )\n\t\t\t: this.document.elementsFromPoint(clientOffset.x, clientOffset.y)\n\t\t// Extend list with parents that are not receiving elementsFromPoint events (size 0 elements and svg groups)\n\t\tconst elementsAtPointExtended: Element[] = []\n\t\tfor (const nodeId in elementsAtPoint) {\n\t\t\t// eslint-disable-next-line no-prototype-builtins\n\t\t\tif (!elementsAtPoint.hasOwnProperty(nodeId)) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tlet currentNode: Element | undefined | null = elementsAtPoint[nodeId]\n\t\t\tif (currentNode != null) {\n\t\t\t\telementsAtPointExtended.push(currentNode)\n\t\t\t}\n\t\t\twhile (currentNode) {\n\t\t\t\tcurrentNode = currentNode.parentElement\n\t\t\t\tif (\n\t\t\t\t\tcurrentNode &&\n\t\t\t\t\telementsAtPointExtended.indexOf(currentNode) === -1\n\t\t\t\t) {\n\t\t\t\t\telementsAtPointExtended.push(currentNode)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst orderedDragOverTargetIds: string[] = elementsAtPointExtended\n\t\t\t// Filter off nodes that arent a hovered DropTargets nodes\n\t\t\t.filter((node) => dragOverTargetNodes.indexOf(node as HTMLElement) > -1)\n\t\t\t// Map back the nodes elements to targetIds\n\t\t\t.map((node) => this._getDropTargetId(node))\n\t\t\t// Filter off possible null rows\n\t\t\t.filter((node) => !!node)\n\t\t\t.filter((id, index, ids) => ids.indexOf(id) === index) as string[]\n\n\t\t// Invoke hover for drop targets when source node is still over and pointer is outside\n\t\tif (enableHoverOutsideTarget) {\n\t\t\tfor (const targetId in this.targetNodes) {\n\t\t\t\tconst targetNode = this.targetNodes.get(targetId)\n\t\t\t\tif (\n\t\t\t\t\tsourceNode &&\n\t\t\t\t\ttargetNode &&\n\t\t\t\t\ttargetNode.contains(sourceNode) &&\n\t\t\t\t\torderedDragOverTargetIds.indexOf(targetId) === -1\n\t\t\t\t) {\n\t\t\t\t\torderedDragOverTargetIds.unshift(targetId)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Reverse order because dnd-core reverse it before calling the DropTarget drop methods\n\t\torderedDragOverTargetIds.reverse()\n\n\t\tthis.actions.hover(orderedDragOverTargetIds, {\n\t\t\tclientOffset: clientOffset,\n\t\t})\n\t}\n\n\t/**\n\t *\n\t * visible for testing\n\t */\n\tpublic _getDropTargetId = (node: Element): Identifier | undefined => {\n\t\tconst keys = this.targetNodes.keys()\n\t\tlet next = keys.next()\n\t\twhile (next.done === false) {\n\t\t\tconst targetId = next.value\n\t\t\tif (node === this.targetNodes.get(targetId)) {\n\t\t\t\treturn targetId\n\t\t\t} else {\n\t\t\t\tnext = keys.next()\n\t\t\t}\n\t\t}\n\t\treturn undefined\n\t}\n\n\tpublic handleTopMoveEndCapture = (e: Event): void => {\n\t\tthis._isScrolling = false\n\t\tthis.lastTargetTouchFallback = undefined\n\n\t\tif (!eventShouldEndDrag(e as MouseEvent)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (!this.monitor.isDragging() || this.monitor.didDrop()) {\n\t\t\tthis.moveStartSourceIds = undefined\n\t\t\treturn\n\t\t}\n\n\t\tif (e.cancelable) e.preventDefault()\n\n\t\tthis._mouseClientOffset = {}\n\n\t\tthis.uninstallSourceNodeRemovalObserver()\n\t\tthis.actions.drop()\n\t\tthis.actions.endDrag()\n\t}\n\n\tpublic handleCancelOnEscape = (e: KeyboardEvent): void => {\n\t\tif (e.key === 'Escape' && this.monitor.isDragging()) {\n\t\t\tthis._mouseClientOffset = {}\n\n\t\t\tthis.uninstallSourceNodeRemovalObserver()\n\t\t\tthis.actions.endDrag()\n\t\t}\n\t}\n\n\tprivate installSourceNodeRemovalObserver(node: HTMLElement | undefined) {\n\t\tthis.uninstallSourceNodeRemovalObserver()\n\n\t\tthis.draggedSourceNode = node\n\t\tthis.draggedSourceNodeRemovalObserver = new MutationObserver(() => {\n\t\t\tif (node && !node.parentElement) {\n\t\t\t\tthis.resurrectSourceNode()\n\t\t\t\tthis.uninstallSourceNodeRemovalObserver()\n\t\t\t}\n\t\t})\n\n\t\tif (!node || !node.parentElement) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.draggedSourceNodeRemovalObserver.observe(node.parentElement, {\n\t\t\tchildList: true,\n\t\t})\n\t}\n\n\tprivate resurrectSourceNode() {\n\t\tif (this.document && this.draggedSourceNode) {\n\t\t\tthis.draggedSourceNode.style.display = 'none'\n\t\t\tthis.draggedSourceNode.removeAttribute('data-reactid')\n\t\t\tthis.document.body.appendChild(this.draggedSourceNode)\n\t\t}\n\t}\n\n\tprivate uninstallSourceNodeRemovalObserver() {\n\t\tif (this.draggedSourceNodeRemovalObserver) {\n\t\t\tthis.draggedSourceNodeRemovalObserver.disconnect()\n\t\t}\n\n\t\tthis.draggedSourceNodeRemovalObserver = undefined\n\t\tthis.draggedSourceNode = undefined\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}