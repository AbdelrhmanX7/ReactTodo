{"ast":null,"code":"import { BEGIN_DRAG, DROP, END_DRAG, HOVER, PUBLISH_DRAG_SOURCE } from '../actions/dragDrop/index.js';\nimport { ADD_SOURCE, ADD_TARGET, REMOVE_SOURCE, REMOVE_TARGET } from '../actions/registry.js';\nimport { ALL, NONE } from '../utils/dirtiness.js';\nimport { areArraysEqual } from '../utils/equality.js';\nimport { xor } from '../utils/js_utils.js';\nexport function reduce() {\n  var _state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NONE;\n\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HOVER:\n      break;\n\n    case ADD_SOURCE:\n    case ADD_TARGET:\n    case REMOVE_TARGET:\n    case REMOVE_SOURCE:\n      return NONE;\n\n    case BEGIN_DRAG:\n    case PUBLISH_DRAG_SOURCE:\n    case END_DRAG:\n    case DROP:\n    default:\n      return ALL;\n  }\n\n  var _action$payload = action.payload,\n      _action$payload$targe = _action$payload.targetIds,\n      targetIds = _action$payload$targe === void 0 ? [] : _action$payload$targe,\n      _action$payload$prevT = _action$payload.prevTargetIds,\n      prevTargetIds = _action$payload$prevT === void 0 ? [] : _action$payload$prevT;\n  var result = xor(targetIds, prevTargetIds);\n  var didChange = result.length > 0 || !areArraysEqual(targetIds, prevTargetIds);\n\n  if (!didChange) {\n    return NONE;\n  } // Check the target ids at the innermost position. If they are valid, add them\n  // to the result\n\n\n  var prevInnermostTargetId = prevTargetIds[prevTargetIds.length - 1];\n  var innermostTargetId = targetIds[targetIds.length - 1];\n\n  if (prevInnermostTargetId !== innermostTargetId) {\n    if (prevInnermostTargetId) {\n      result.push(prevInnermostTargetId);\n    }\n\n    if (innermostTargetId) {\n      result.push(innermostTargetId);\n    }\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"AAAA,SACCA,UADD,EAECC,IAFD,EAGCC,QAHD,EAICC,KAJD,EAKCC,mBALD,QAMO,8BANP;AAOA,SACCC,UADD,EAECC,UAFD,EAGCC,aAHD,EAICC,aAJD,QAKO,wBALP;AAOA,SAASC,GAAT,EAAcC,IAAd,QAA0B,uBAA1B;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,GAAT,QAAoB,sBAApB;AASA,OAAO,SAASC,MAAT,GAIE;EAAA,IAFRC,MAEQ,uEAFQJ,IAER;;EAAA,IADRK,MACQ;;EACR,QAAQA,MAAM,CAACC,IAAf;IACC,KAAKb,KAAL;MACC;;IACD,KAAKE,UAAL;IACA,KAAKC,UAAL;IACA,KAAKE,aAAL;IACA,KAAKD,aAAL;MACC,OAAOG,IAAP;;IACD,KAAKV,UAAL;IACA,KAAKI,mBAAL;IACA,KAAKF,QAAL;IACA,KAAKD,IAAL;IACA;MACC,OAAOQ,GAAP;EAbF;;EAgBA,sBAA+CM,MAAM,CAACE,OAAtD;EAAA,4CAAQC,SAAR;EAAA,IAAQA,SAAR,sCAAoB,EAApB;EAAA,4CAAwBC,aAAxB;EAAA,IAAwBA,aAAxB,sCAAwC,EAAxC;EACA,IAAMC,MAAM,GAAGR,GAAG,CAACM,SAAD,EAAYC,aAAZ,CAAlB;EACA,IAAME,SAAS,GACdD,MAAM,CAACE,MAAPF,GAAgB,CAAhBA,IAAqB,CAACT,cAAc,CAACO,SAAD,EAAYC,aAAZ,CADrC;;EAGA,IAAI,CAACE,SAAL,EAAgB;IACf,OAAOX,IAAP;EACA,CAxBO,CA0BR;EACA;;;EACA,IAAMa,qBAAqB,GAAGJ,aAAa,CAACA,aAAa,CAACG,MAAdH,GAAuB,CAAxB,CAA3C;EACA,IAAMK,iBAAiB,GAAGN,SAAS,CAACA,SAAS,CAACI,MAAVJ,GAAmB,CAApB,CAAnC;;EACA,IAAIK,qBAAqB,KAAKC,iBAA9B,EAAiD;IAChD,IAAID,qBAAJ,EAA2B;MAC1BH,MAAM,CAACK,IAAPL,CAAYG,qBAAZH;IACA;;IACD,IAAII,iBAAJ,EAAuB;MACtBJ,MAAM,CAACK,IAAPL,CAAYI,iBAAZJ;IACA;EACD;;EAED,OAAOA,MAAP;AACA","names":["BEGIN_DRAG","DROP","END_DRAG","HOVER","PUBLISH_DRAG_SOURCE","ADD_SOURCE","ADD_TARGET","REMOVE_SOURCE","REMOVE_TARGET","ALL","NONE","areArraysEqual","xor","reduce","_state","action","type","payload","targetIds","prevTargetIds","result","didChange","length","prevInnermostTargetId","innermostTargetId","push"],"sources":["E:\\Front-End-Challenges\\React-Challenges\\Completed Challenges\\ReactTodo\\node_modules\\dnd-core\\src\\reducers\\dirtyHandlerIds.ts"],"sourcesContent":["import {\n\tBEGIN_DRAG,\n\tDROP,\n\tEND_DRAG,\n\tHOVER,\n\tPUBLISH_DRAG_SOURCE,\n} from '../actions/dragDrop/index.js'\nimport {\n\tADD_SOURCE,\n\tADD_TARGET,\n\tREMOVE_SOURCE,\n\tREMOVE_TARGET,\n} from '../actions/registry.js'\nimport type { Action } from '../interfaces.js'\nimport { ALL, NONE } from '../utils/dirtiness.js'\nimport { areArraysEqual } from '../utils/equality.js'\nimport { xor } from '../utils/js_utils.js'\n\nexport type State = string[]\n\nexport interface DirtyHandlerIdPayload {\n\ttargetIds: string[]\n\tprevTargetIds: string[]\n}\n\nexport function reduce(\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t_state: State = NONE,\n\taction: Action<DirtyHandlerIdPayload>,\n): State {\n\tswitch (action.type) {\n\t\tcase HOVER:\n\t\t\tbreak\n\t\tcase ADD_SOURCE:\n\t\tcase ADD_TARGET:\n\t\tcase REMOVE_TARGET:\n\t\tcase REMOVE_SOURCE:\n\t\t\treturn NONE\n\t\tcase BEGIN_DRAG:\n\t\tcase PUBLISH_DRAG_SOURCE:\n\t\tcase END_DRAG:\n\t\tcase DROP:\n\t\tdefault:\n\t\t\treturn ALL\n\t}\n\n\tconst { targetIds = [], prevTargetIds = [] } = action.payload\n\tconst result = xor(targetIds, prevTargetIds)\n\tconst didChange =\n\t\tresult.length > 0 || !areArraysEqual(targetIds, prevTargetIds)\n\n\tif (!didChange) {\n\t\treturn NONE\n\t}\n\n\t// Check the target ids at the innermost position. If they are valid, add them\n\t// to the result\n\tconst prevInnermostTargetId = prevTargetIds[prevTargetIds.length - 1]\n\tconst innermostTargetId = targetIds[targetIds.length - 1]\n\tif (prevInnermostTargetId !== innermostTargetId) {\n\t\tif (prevInnermostTargetId) {\n\t\t\tresult.push(prevInnermostTargetId)\n\t\t}\n\t\tif (innermostTargetId) {\n\t\t\tresult.push(innermostTargetId)\n\t\t}\n\t}\n\n\treturn result\n}\n"]},"metadata":{},"sourceType":"module"}