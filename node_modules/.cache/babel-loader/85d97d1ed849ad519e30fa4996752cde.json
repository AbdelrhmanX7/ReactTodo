{"ast":null,"code":"// cheap lodash replacements\n\n/**\n * drop-in replacement for _.get\n * @param obj\n * @param path\n * @param defaultValue\n */\nexport function get(obj, path, defaultValue) {\n  return path.split('.').reduce(function (a, c) {\n    return a && a[c] ? a[c] : defaultValue || null;\n  }, obj);\n}\n/**\n * drop-in replacement for _.without\n */\n\nexport function without(items, item) {\n  return items.filter(function (i) {\n    return i !== item;\n  });\n}\n/**\n * drop-in replacement for _.isString\n * @param input\n */\n\nexport function isString(input) {\n  return typeof input === 'string';\n}\n/**\n * drop-in replacement for _.isString\n * @param input\n */\n\nexport function isObject(input) {\n  return typeof input === 'object';\n}\n/**\n * replacement for _.xor\n * @param itemsA\n * @param itemsB\n */\n\nexport function xor(itemsA, itemsB) {\n  var map = new Map();\n\n  var insertItem = function insertItem(item) {\n    map.set(item, map.has(item) ? map.get(item) + 1 : 1);\n  };\n\n  itemsA.forEach(insertItem);\n  itemsB.forEach(insertItem);\n  var result = [];\n  map.forEach(function (count, key) {\n    if (count === 1) {\n      result.push(key);\n    }\n  });\n  return result;\n}\n/**\n * replacement for _.intersection\n * @param itemsA\n * @param itemsB\n */\n\nexport function intersection(itemsA, itemsB) {\n  return itemsA.filter(function (t) {\n    return itemsB.indexOf(t) > -1;\n  });\n}","map":{"version":3,"mappings":"AAAA;;AAEA;;;;;;AAMA,OAAO,SAASA,GAAT,CAAgBC,GAAhB,EAA0BC,IAA1B,EAAwCC,YAAxC,EAA4D;EAClE,OAAOD,IAAI,CACTE,KADKF,CACC,GADDA,EAELG,MAFKH,CAEE,UAACI,CAAD,EAAIC,CAAJ;IAAA,OAAWD,CAAC,IAAIA,CAAC,CAACC,CAAD,CAAND,GAAYA,CAAC,CAACC,CAAD,CAAbD,GAAmBH,YAAY,IAAI,IAA9C;EAAA,CAFFD,EAEuDD,GAFvDC,CAAP;AAGA;AAED;;;;AAGA,OAAO,SAASM,OAAT,CAAoBC,KAApB,EAAgCC,IAAhC,EAA8C;EACpD,OAAOD,KAAK,CAACE,MAANF,CAAa,UAACG,CAAD;IAAA,OAAOA,CAAC,KAAKF,IAAb;EAAA,CAAbD,CAAP;AACA;AAED;;;;;AAIA,OAAO,SAASI,QAAT,CAAkBC,KAAlB,EAAuC;EAC7C,OAAO,OAAOA,KAAP,KAAiB,QAAxB;AACA;AAED;;;;;AAIA,OAAO,SAASC,QAAT,CAAkBD,KAAlB,EAAuC;EAC7C,OAAO,OAAOA,KAAP,KAAiB,QAAxB;AACA;AAED;;;;;;AAKA,OAAO,SAASE,GAAT,CAAwCC,MAAxC,EAAqDC,MAArD,EAAuE;EAC7E,IAAMC,GAAG,GAAG,IAAIC,GAAJ,EAAZ;;EACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACX,IAAD,EAAa;IAC/BS,GAAG,CAACG,GAAJH,CAAQT,IAARS,EAAcA,GAAG,CAACI,GAAJJ,CAAQT,IAARS,IAAgBA,GAAI,CAACnB,GAAL,CAASU,IAAT,IAA4B,CAA5CS,GAAgD,CAA9DA;EACA,CAFD;;EAGAF,MAAM,CAACO,OAAPP,CAAeI,UAAfJ;EACAC,MAAM,CAACM,OAAPN,CAAeG,UAAfH;EAEA,IAAMO,MAAM,GAAQ,EAApB;EACAN,GAAG,CAACK,OAAJL,CAAY,UAACO,KAAD,EAAQC,GAAR,EAAgB;IAC3B,IAAID,KAAK,KAAK,CAAd,EAAiB;MAChBD,MAAM,CAACG,IAAPH,CAAYE,GAAZF;IACA;EACD,CAJDN;EAKA,OAAOM,MAAP;AACA;AAED;;;;;;AAKA,OAAO,SAASI,YAAT,CAAyBZ,MAAzB,EAAsCC,MAAtC,EAAwD;EAC9D,OAAOD,MAAM,CAACN,MAAPM,CAAc,UAACa,CAAD;IAAA,OAAOZ,MAAM,CAACa,OAAPb,CAAeY,CAAfZ,IAAoB,CAAC,CAA5B;EAAA,CAAdD,CAAP;AACA","names":["get","obj","path","defaultValue","split","reduce","a","c","without","items","item","filter","i","isString","input","isObject","xor","itemsA","itemsB","map","Map","insertItem","set","has","forEach","result","count","key","push","intersection","t","indexOf"],"sources":["E:\\Front-End-Challenges\\React-Challenges\\Completed Challenges\\ReactTodo\\node_modules\\dnd-core\\src\\utils\\js_utils.ts"],"sourcesContent":["// cheap lodash replacements\n\n/**\n * drop-in replacement for _.get\n * @param obj\n * @param path\n * @param defaultValue\n */\nexport function get<T>(obj: any, path: string, defaultValue: T): T {\n\treturn path\n\t\t.split('.')\n\t\t.reduce((a, c) => (a && a[c] ? a[c] : defaultValue || null), obj) as T\n}\n\n/**\n * drop-in replacement for _.without\n */\nexport function without<T>(items: T[], item: T): T[] {\n\treturn items.filter((i) => i !== item)\n}\n\n/**\n * drop-in replacement for _.isString\n * @param input\n */\nexport function isString(input: any): boolean {\n\treturn typeof input === 'string'\n}\n\n/**\n * drop-in replacement for _.isString\n * @param input\n */\nexport function isObject(input: any): boolean {\n\treturn typeof input === 'object'\n}\n\n/**\n * replacement for _.xor\n * @param itemsA\n * @param itemsB\n */\nexport function xor<T extends string | number>(itemsA: T[], itemsB: T[]): T[] {\n\tconst map = new Map<T, number>()\n\tconst insertItem = (item: T) => {\n\t\tmap.set(item, map.has(item) ? (map.get(item) as number) + 1 : 1)\n\t}\n\titemsA.forEach(insertItem)\n\titemsB.forEach(insertItem)\n\n\tconst result: T[] = []\n\tmap.forEach((count, key) => {\n\t\tif (count === 1) {\n\t\t\tresult.push(key)\n\t\t}\n\t})\n\treturn result\n}\n\n/**\n * replacement for _.intersection\n * @param itemsA\n * @param itemsB\n */\nexport function intersection<T>(itemsA: T[], itemsB: T[]): T[] {\n\treturn itemsA.filter((t) => itemsB.indexOf(t) > -1)\n}\n"]},"metadata":{},"sourceType":"module"}