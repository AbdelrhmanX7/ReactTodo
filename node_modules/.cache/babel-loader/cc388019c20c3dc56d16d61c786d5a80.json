{"ast":null,"code":"export var ListenerType;\n\n(function (ListenerType) {\n  ListenerType[\"mouse\"] = \"mouse\";\n  ListenerType[\"touch\"] = \"touch\";\n  ListenerType[\"keyboard\"] = \"keyboard\";\n})(ListenerType || (ListenerType = {}));","map":{"version":3,"mappings":"AAAA,WA+BOA,YA/BP;;WA+BYA,cAAY;EAAZA,YAAY,CACvBC,OADuB,CAAZD,GACXC,OADWD;EAAAA,YAAY,CAEvBE,OAFuB,CAAZF,GAEXE,OAFWF;EAAAA,YAAY,CAGvBG,UAHuB,CAAZH,GAGXG,UAHWH;GAAAA,YAAY,KAAZA,YAAY","names":["ListenerType","mouse","touch","keyboard"],"sources":["E:\\Front-End-Challenges\\React-Challenges\\Completed Challenges\\ReactTodo\\node_modules\\react-dnd-touch-backend\\src\\interfaces.ts"],"sourcesContent":["export interface EventName {\n\tstart?: 'mousedown' | 'touchstart'\n\tmove?: 'mousemove' | 'touchmove'\n\tend?: 'mouseup' | 'touchend'\n\tcontextmenu?: 'contextmenu'\n\tkeydown?: 'keydown'\n}\n\nexport interface TouchBackendOptions {\n\tdelay: number\n\tdelayTouchStart: number\n\tenableTouchEvents: boolean\n\tenableKeyboardEvents: boolean\n\tenableMouseEvents: boolean\n\tignoreContextMenu: boolean\n\tenableHoverOutsideTarget: boolean\n\tdelayMouseStart: number\n\ttouchSlop: number\n\tscrollAngleRanges?: AngleRange[] | undefined\n\trootElement: Node | undefined\n\n\tgetDropTargetElementsAtPoint?:\n\t\t| undefined\n\t\t| ((x: number, y: number, dropTargets: HTMLElement[]) => HTMLElement[])\n}\n\nexport interface AngleRange {\n\tstart: number\n\tend: number\n}\n\nexport enum ListenerType {\n\tmouse = 'mouse',\n\ttouch = 'touch',\n\tkeyboard = 'keyboard',\n}\n\nexport interface TouchBackendContext {\n\twindow?: Window\n\tdocument?: Document\n}\n"]},"metadata":{},"sourceType":"module"}