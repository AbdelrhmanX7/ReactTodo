[{"E:\\Front-End-Challenges\\React-Challenges\\Completed Challenges\\ReactTodo\\src\\index.js":"1","E:\\Front-End-Challenges\\React-Challenges\\Completed Challenges\\ReactTodo\\src\\App.js":"2","E:\\Front-End-Challenges\\React-Challenges\\Completed Challenges\\ReactTodo\\src\\components\\UI\\TodoUi.js":"3","E:\\Front-End-Challenges\\React-Challenges\\Completed Challenges\\ReactTodo\\src\\components\\TodoList\\TodoList.js":"4","E:\\Front-End-Challenges\\React-Challenges\\Completed Challenges\\ReactTodo\\src\\components\\TodoList\\TodoResults.js":"5","E:\\Front-End-Challenges\\React-Challenges\\Completed Challenges\\ReactTodo\\src\\utils\\items.js":"6"},{"size":206,"mtime":1648705671000,"results":"7","hashOfConfig":"8"},{"size":871,"mtime":1655180097051,"results":"9","hashOfConfig":"8"},{"size":3509,"mtime":1655175918851,"results":"10","hashOfConfig":"8"},{"size":5302,"mtime":1655175905705,"results":"11","hashOfConfig":"8"},{"size":2071,"mtime":1655143529718,"results":"12","hashOfConfig":"8"},{"size":47,"mtime":1651433037661,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"1tmddrx",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"17"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"E:\\Front-End-Challenges\\React-Challenges\\Completed Challenges\\ReactTodo\\src\\index.js",[],[],[],"E:\\Front-End-Challenges\\React-Challenges\\Completed Challenges\\ReactTodo\\src\\App.js",[],[],"E:\\Front-End-Challenges\\React-Challenges\\Completed Challenges\\ReactTodo\\src\\components\\UI\\TodoUi.js",[],[],"E:\\Front-End-Challenges\\React-Challenges\\Completed Challenges\\ReactTodo\\src\\components\\TodoList\\TodoList.js",["34","35"],[],"import React from 'react';\r\nimport update from \"immutability-helper\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport { ItemType } from \"../../utils/items\";\r\nimport \"./../UI/Todo.css\";\r\nimport TodoResults from \"./TodoResults\";\r\nconst TodoList = (props) => {\r\n  const [ITEMS, setItems] = useState(props.Data)\r\n  const [cards, setCards] = useState(ITEMS)\r\n  const findCard = useCallback(\r\n    (id) => {\r\n      const card = cards.filter((c) => `${c.id}` === id)[0]\r\n      return {\r\n        card,\r\n        index: cards.indexOf(card),\r\n      }\r\n    },\r\n    [cards],\r\n  )\r\n  useEffect(() => {\r\n    setCards(props.Data)\r\n  }, [props.Data])\r\n  const moveCard = useCallback(\r\n    (id, atIndex) => {\r\n      const { card, index } = findCard(id)\r\n      setCards(\r\n        update(cards, {\r\n          $splice: [\r\n            [index, 1],\r\n            [atIndex, 0, card],\r\n          ],\r\n        }),\r\n      )\r\n    },\r\n    [findCard, cards, setCards],\r\n  )\r\n\r\n  useEffect(() => {\r\n    props.onUpdate(cards)\r\n  }, [cards])\r\n\r\n  useEffect(() => {\r\n    const str = localStorage.getItem('test')\r\n    const parseObj = JSON.parse(str)\r\n    props.onUpdate(parseObj)\r\n    setCards(parseObj)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const jsonObj = JSON.stringify(props.Data)\r\n    localStorage.setItem('test', jsonObj)\r\n  }, [props.Data])\r\n\r\n  const [, drop] = useDrop(() => ({ accept: ItemType.CARD }))\r\n  const btns = document.getElementsByClassName(\"Checked-btns\");\r\n  const [checkState, setCheckState] = useState(\"All\");\r\n  const [Datalen, setDataLen] = useState(0);\r\n  const CheckLen = () => {\r\n    const GetLen = props.Data.filter((card) => {\r\n      return card.state === \"Complete\";\r\n    });\r\n    setDataLen(GetLen.length);\r\n  };\r\n\r\n  const onAll = () => {\r\n    for (let i = 0; i < btns.length; i++) {\r\n      btns[i].style.color = \"hsl(236, 9%, 61%)\";\r\n    }\r\n    btns[0].style.color = \"hsl(220, 98%, 61%)\";\r\n    setCheckState(\"All\");\r\n  };\r\n\r\n  const onActive = () => {\r\n    for (let i = 0; i < btns.length; i++) {\r\n      btns[i].style.color = \"hsl(236, 9%, 61%)\";\r\n    }\r\n    btns[1].style.color = \"hsl(220, 98%, 61%)\";\r\n    setCheckState(\"Active\");\r\n    setItems(props.Data)\r\n  };\r\n  const onComplete = () => {\r\n    for (let i = 0; i < btns.length; i++) {\r\n      btns[i].style.color = \"hsl(236, 9%, 61%)\";\r\n    }\r\n    btns[2].style.color = \"hsl(220, 98%, 61%)\";\r\n    setCheckState(\"Complete\");\r\n  };\r\n  const onClear = () => {\r\n    setDataLen(0);\r\n    props.onClearComplete();\r\n  };\r\n  return (\r\n    <ul className=\"UserResults\">\r\n        <div className=\"UserDrop\" ref={drop}>\r\n          {props.Data.length === 0 ? (\r\n            <TodoResults\r\n              value={\"There are Nothing Here\"}\r\n              moveCard={moveCard}\r\n              findCard={findCard}\r\n              id={\"arsa\"}\r\n            />\r\n          ) : checkState === \"All\" ? (\r\n            cards.map((card) => {\r\n              return (\r\n                <TodoResults\r\n                  value={card.value}\r\n                  state={card.state}\r\n                  id={`${card.id}`}\r\n                  key={card.id}\r\n                  checkState={props.onCheckState}\r\n                  CheckLen={CheckLen}\r\n                  Delete={props.onDelete}\r\n                  moveCard={moveCard}\r\n                  findCard={findCard}\r\n                />\r\n              );\r\n            })\r\n          ) : checkState === \"Active\" ? (\r\n            cards.map((card) => {\r\n              return card.state === \"Active\" ? (\r\n                <TodoResults\r\n                  value={card.value}\r\n                  state={card.state}\r\n                  id={card.id}\r\n                  key={card.id}\r\n                  checkState={props.onCheckState}\r\n                  CheckLen={CheckLen}\r\n                  Delete={props.onDelete}\r\n                  moveCard={moveCard}\r\n                  findCard={findCard}\r\n                />\r\n              ) : (\r\n                console.log(\"Error\")\r\n              );\r\n            })\r\n          ) : checkState === \"Complete\" ? (\r\n            props.Data.map((card) => {\r\n              return card.state === \"Complete\" ? (\r\n                <TodoResults\r\n                  value={card.value}\r\n                  state={card.state}\r\n                  id={card.id}\r\n                  key={card.id}\r\n                  checkState={props.onCheckState}\r\n                  CheckLen={CheckLen}\r\n                  Delete={props.onDelete}\r\n                  moveCard={moveCard}\r\n                  findCard={findCard}\r\n                />\r\n              ) : (\r\n                console.log(\"Error\")\r\n              );\r\n            })\r\n          ) : (\r\n            console.log(\"Error\")\r\n          )}\r\n        </div>\r\n      <div className=\"active-states\">\r\n        <p>{props.Data.length - Datalen} items left</p>\r\n        <div className=\"check-btns\">\r\n          <button className=\"Checked-btns\" onClick={onAll}>\r\n            All\r\n          </button>\r\n          <button className=\"Checked-btns\" onClick={onActive}>\r\n            Active\r\n          </button>\r\n          <button className=\"Checked-btns\" onClick={onComplete}>\r\n            Completed\r\n          </button>\r\n        </div>\r\n        <button onClick={onClear}>Clear Completed</button>\r\n      </div>\r\n    </ul>\r\n  );\r\n};\r\nexport default TodoList;\r\n","E:\\Front-End-Challenges\\React-Challenges\\Completed Challenges\\ReactTodo\\src\\components\\TodoList\\TodoResults.js",[],[],"E:\\Front-End-Challenges\\React-Challenges\\Completed Challenges\\ReactTodo\\src\\utils\\items.js",[],[],{"ruleId":"36","severity":1,"message":"37","line":41,"column":6,"nodeType":"38","endLine":41,"endColumn":13,"suggestions":"39"},{"ruleId":"36","severity":1,"message":"37","line":48,"column":6,"nodeType":"38","endLine":48,"endColumn":8,"suggestions":"40"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["41"],["42"],{"desc":"43","fix":"44"},{"desc":"45","fix":"46"},"Update the dependencies array to be: [cards, props]",{"range":"47","text":"48"},"Update the dependencies array to be: [props]",{"range":"49","text":"50"},[1052,1059],"[cards, props]",[1228,1230],"[props]"]